<!--

 * Copyright (c) 2005-2013 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 -->
<project name="test" default="usage" basedir=".">

    <antversion property="ant.version.check" atleast="1.8.0" />
    <fail message="Please use Ant 1.8.0 or greater. A copy is checked in to LABKEY_ROOT/external/ant" unless="ant.version.check" />

    <property environment="env"/>
    <property name="test.dir" value="${basedir}" />
    <property name="test.build.home" value="${test.dir}/build"/>
    <property name="test.build.uptodate" value="${test.build.home}/uptodate"/>
    <property name="test.src.home" value="${test.dir}/src"/>
    <property name="project.root" value="${test.dir}/../.." />
    <property name="test.lib.home" value="${test.dir}/lib"/>
    <property name="external.lib.home" value="${project.root}/external/lib/server"/>
    <property name="test.log.dir" value="${test.dir}/logs"/>
    <property name="test.log.output.dir" value="${test.build.home}/logs" />
    <property name="javaclient.dir" value="${project.root}/remoteapi/java"/>
    <property name="javaclient.build.xml" value="${javaclient.dir}/build.xml"/>
    <property name="javaclientjar.dir" value="${project.root}/build/client-api/java/jar"/>
    <property name="javaclientlib.dir" value="${javaclient.dir}/lib"/>
    <property name="deploy.dir" value="${project.root}/build/deploy" />
    <property name="deploy.webapp.dir" value="${deploy.dir}/labkeyWebapp" />

    <property name="staging.modules.dir" value="${project.root}/build/staging/modules"/>
    <property name="deploy.modules.dir" value="${project.root}/build/deploy/modules"/>

    <property name="test.compile.debug" value="true"/>
    <property name="test.compile.deprecation" value="false"/>
    <property name="test.compile.optimize" value="true"/>

    <!-- Grab product.version set by TeamCity if it is there -->
    <condition property="product.version" value="${teamcity.product.version}" else="DevBuild" >
        <isset property="teamcity.product.version"/>
    </condition>
    <property name="version" value="${product.version}"/>

    <condition property="windows">
        <os family="windows"/>
    </condition>

    <condition property="unix">
        <os family="unix"/>
    </condition>

    <property name="clover.jar" location="${project.root}/external/clover/clover-ant-3.1.8/lib/clover.jar"/>


    <target name="usage">
        <echo message="Valid Test Targets:" />
        <echo message="drt                run developer regression tests (short suite)" />
        <echo message="bvt                run build verification tests (long suite)" />
        <echo message="daily              run daily test suite" />
        <echo message="continue           continue running a suite after a failure, starting with the test that failed" />
        <echo message="continue-debug     continue running a suite after a failure, starting with the test that failed, but suspend until debugger attaches" />
        <echo message="drt-debug          run drt, but suspend until debugger attaches" />
        <echo message="bvt-debug          run bvt, but suspend until debugger attaches" />
        <echo message="daily-debug        run daily, but suspend until debugger attaches" />
        <echo message="drt-clean          clean up after drt tests"/>
        <echo message="bvt-clean          clean up after bvt tests"/>
        <echo message="daily-clean        clean up after daily tests"/>
        <echo message="setPassword        reset your stored password" />
        <echo message="ms2t               run MS2 tests" />
        <echo message="cluster            run MS2 cluster pipeline tests" />
        <echo message="xtandem            run X! Tandem tests" />
        <echo message="study              run study tests" />
        <echo message="mascot             run Mascot tests" />
        <echo message="sequest            run Sequest tests" />
        <echo message="test               runs UI for selecting and running specific tests" />

        <echo message="usage              displays this message"/>
        <echo message=""/>
        <echo message="To specify individual tests to be run or cleaned, add:"/>
        <echo message="    -Dtest=&quot;{name}[,{name}]&quot;"/>
        <echo message="{name} is the name of any test class, optionally dropping a trailing"/>
        <echo message="'Test' from the name.  For MS2Test.java, valid test names include"/>
        <echo message="MS2, ms2, and MS2Test."/>
        <echo message=""/>
        <echo message="To specify a named test suite (e.g., Flow, Wiki, IE) to be run or cleaned, use:"/>
        <echo message="    ant test -Dsuite={name}"/>
        <echo message=""/>
        <echo message="To continue to run all tests even if there is a failure, add:"/>
        <echo message="    -DhaltOnError=false"/>
        <echo message=""/>
        <echo message="To run tests in an infinite loop, add:"/>
        <echo message="    -Dloop=true"/>
        <echo message=""/>
        <echo message="By default, labkey is accessed at port 8080."/>
        <echo message="To specify a different port, add:" />
        <echo message="    -Dlabkey.port={portnumber}"/>
        <echo message=""/>
        <echo message="It is sometimes useful to skip post-test cleanup, leaving the test data on the site."/>
        <echo message="To skip cleanup for all tests:"/>
        <echo message="    -Dclean=false"/>
        <echo message=""/>
        <echo message="If a test fails or you've previously used -Dclean=false, you may want to force a test"/>
        <echo message="(or a group of tests) to perform post-test cleanup."/>
        <echo message="To perform just the cleanup steps of the specified test(s):"/>
        <echo message="    -DcleanOnly=true"/>
        <echo message=""/>
        <echo message="By default, labkey is accessed at context path '/labkey'."/>
        <echo message="To specify a different context path, add:"/>
        <echo message="    -Dlabkey.contextpath={contextpath}"/>
        <echo message=""/>
        <echo message="For extra coverage, the harness can crawl all new links after each test, checking for"/>
        <echo message="404 and 500 errors.  This provides extra safely, but adds time.  The BVT checks links"/>
        <echo message="by default. To enable link checking:"/>
        <echo message="    -DlinkCheck=true"/>
        <echo message=""/>
        <echo message="Add javascript injection testing:"/>
        <echo message="    -DinjectCheck=true"/>
        <echo message=""/>
        <echo message="Enable view verification:"/>
        <echo message="    -DviewCheck=true"/>
        <echo message=""/>
        <echo message="The leak checker is run by default for DRT and BVT tests.  To disable mem checking:"/>
        <echo message="    -DmemCheck=false"/>
        <echo message=""/>
        <echo message="Disable javascript error checking (firefox only):"/>
        <echo message="    -DscriptCheck=false"/>
        <echo message=""/>
        <echo message="Disable query validation checking:"/>
        <echo message="    -DqueryCheck=false"/>
        <echo message=""/>
        <echo message="Randomize test order."/>
        <echo message="    -DshuffleTests=true"/>
    </target>

    <target name="clean">
        <delete dir="${test.build.home}" />
    </target>

    <target name="delete_logs">
        <echo message="Deleting log files from ${tomcat.home}/logs"/>
        <delete failonerror="false" dir="${tomcat.home}/logs" />
        <echo message="Deleting tomcat temp dir ${tomcat.home}/temp"/>
        <delete failonerror="false" dir="${tomcat.home}/temp" />
        <delete file="${basedir}/../teamcity-info.xml"/>
        <mkdir dir="${tomcat.home}/logs" />
        <mkdir dir="${tomcat.home}/temp" />
    </target>

    <target name="prepare">
        <mkdir dir="${test.build.home}/classes" />
        <mkdir dir="${test.log.output.dir}" />
    </target>

    <path id="test.lib.selenium.classpath">
        <fileset dir="${test.lib.home}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.lib.classpath">
        <fileset dir="${test.lib.home}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${external.lib.home}">
            <include name="annotations.jar"/>
            <include name="junit-4.1.jar"/>
            <include name="commons-lang3-3.1.jar" />
            <include name="axis.jar" />
            <include name="saaj.jar" />
            <include name="wsdl4j-1.5.1.jar" />
            <include name="jaxrpc.jar" />
            <include name="commons-discovery-0.2.jar" />
            <include name="tika-app-1.3.jar"/>
            <!--include name="log4j-1.2.16.jar" /-->
            <include name="xbean.jar" />
        </fileset>
        <fileset dir="${javaclientjar.dir}">
            <include name="labkey-client-api-${product.version}.jar"/>
        </fileset>
        <fileset dir="${javaclientlib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${deploy.webapp.dir}/WEB-INF/lib">
            <include name="schemas.jar"/>
        </fileset>
    </path>

    <path id="test.build.classpath">
        <path refid="test.lib.classpath" />
        <pathelement path="${clover.jar}"/>
        <pathelement path="${test.lib.home}/aspectjrt.jar"/>
        <!-- Put two paths for tools.jar on the classpath, in case java.home is pointed at the JRE in the ./jre
             subdirectory of the JDK -->
        <pathelement path="${java.home}/lib/tools.jar"/>
        <pathelement path="${java.home}/../lib/tools.jar"/>
    </path>

    <path id="test.run.classpath">
        <path refid="test.build.classpath"/>
        <pathelement location="${test.build.home}/classes" />
        <pathelement path="${clover.jar}"/>
    </path>

    <target name="compile" depends="build-java-client,prepare,build-qc-validator" description="Compile Java sources">
        <uptodate targetfile="${test.build.uptodate}" property="testClassesUpToDate">
            <srcfiles dir="${test.src.home}" />
        </uptodate>
        <antcall target="compileIfDirty_ajc" />
    </target>

    <target name="compileIfDirty" unless="testClassesUpToDate">
        <antcall target="test_with_clover" />
        <antcall target="clean" />
        <antcall target="prepare" />
        <javac srcdir="${test.src.home}"
            destdir="${test.build.home}/classes"
            debug="${test.compile.debug}"
            deprecation="${test.compile.deprecation}"
            optimize="${test.compile.optimize}"
            source="1.7"
            classpathref="test.build.classpath">
        </javac>
        <copy todir="${test.build.home}/classes" >
            <fileset dir="${test.src.home}">
                <include name="**/*.js"/>
            </fileset>
        </copy>
        <touch file="${test.build.uptodate}" />
    </target>

    <target name="compileIfDirty_ajc" unless="testClassesUpToDate">
        <taskdef
            resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
          <classpath>
            <pathelement location="${test.lib.home}/aspectjtools.jar"/>
          </classpath>
        </taskdef>

        <antcall target="test_with_clover" />
        <antcall target="clean" />
        <antcall target="prepare" />
        <iajc srcdir="${test.src.home}"
            destdir="${test.build.home}/classes"
            debug="${test.compile.debug}"
            deprecation="${test.compile.deprecation}"
            source="1.7"
            classpathref="test.build.classpath">
        </iajc>
        <copy todir="${test.build.home}/classes" >
            <fileset dir="${test.src.home}">
                <include name="**/*.js"/>
            </fileset>
        </copy>
        <touch file="${test.build.uptodate}" />
    </target>

    <target name="test_with_clover" if="test.with.clover">
        <ant target="with_clover" antfile="${project.root}/server/build.xml" inheritall="false"/>
    </target>

    <target name="build-java-client" description="calls the jar task in the remoteapi/java/build.xml">
        <ant antfile="${javaclient.build.xml}" target="jar" inheritall="false"/>
    </target>

    <target name="setPassword" depends="compile">
        <java classname="org.labkey.test.util.PasswordUtil">
            <classpath refid="test.run.classpath"/>
            <arg id="action" value="set"/>
        </java>
    </target>

    <target name="setTeamcityAgentPassword" depends="compile">
        <java classname="org.labkey.test.util.PasswordUtil">
            <classpath refid="test.run.classpath"/>
            <arg id="action" value="set"/>
            <arg id="username" value="cruisecontrol@labkey.com"/>
            <arg id="password" value="cruisecontrol"/>
        </java>
    </target>

    <target name="ensurePassword" depends="compile">
        <java classname="org.labkey.test.util.PasswordUtil" failonerror="true">
            <classpath refid="test.run.classpath"/>
            <arg id="action" value="ensure"/>
        </java>
    </target>

    <target name="deletePassword" depends="compile">
        <java classname="org.labkey.test.util.PasswordUtil" failonerror="true">
            <classpath refid="test.run.classpath"/>
            <arg id="action" value="delete"/>
        </java>
    </target>

    <target name="deploy-test-modules" depends="stage-test-modules">
        <copy todir="${deploy.modules.dir}">
          <fileset dir="${staging.modules.dir}">
            <include name="miniassay.module"/>
            <include name="simpletest.module"/>
            <include name="linkedschematest.module"/>
          </fileset>
        </copy>
        <ant dir="${project.root}/server/test/modules/scriptpad" target="build" usenativebasedir="true"/>

        <!-- See if the test modules have been updated in the deployment directory (the copy will no-op
        if the source files are older, so the timestamps won't change) than the last time we remember deploying them --> 
        <uptodate property="testModulesDeployUpToDate" targetfile="${basedir}/testModuleDeployment.timestamp">
            <srcfiles dir="${deploy.modules.dir}">
                <include name="miniassay.module"/>
                <include name="simpletest.module"/>
                <include name="linkedschematest.module"/>
            </srcfiles>
        </uptodate>
        <antcall target="wait-for-redeploy-if-needed" />
    </target>

    <!-- We need to wait for the server to finish its redeploy, so we do a more patient, thorough version of the wait
    here than during our usual check if we haven't deployed new test modules -->
    <target name="wait-for-redeploy-if-needed" unless="testModulesDeployUpToDate" depends="set-user-props">
      <antcall target="waitfor-labkey-started" />
      <echo message="Waiting for 10 seconds in case the server needs to redeploy the webapp" />
      <sleep seconds="10"/>
      <antcall target="waitfor-labkey-started" />
        <touch file="${basedir}/testModuleDeployment.timestamp" />
    </target>

    <target name="stage-test-modules" depends="stage-miniassay-module, stage-simpletest-module, stage-linkedschematest-module, install-rpackages">
    </target>

    <target name="stage-linkedschematest-module">
      <antcall target="stage-test-module">
        <param name="module.name" value="linkedschematest"/>
        <param name="module.src.dir" value="${project.root}/server/test/modules"/>
      </antcall>
    </target>

    <target name="stage-simpletest-module">
      <antcall target="stage-test-module">
        <param name="module.name" value="simpletest"/>
        <param name="module.src.dir" value="${project.root}/server/test/modules"/>
      </antcall>
    </target>

    <target name="stage-miniassay-module">
      <antcall target="stage-test-module">
        <param name="module.name" value="miniassay"/>
        <param name="module.src.dir" value="${project.root}/server/test/modules"/>
      </antcall>
    </target>

    <target name="stage-test-module.check">
      <fail message="module.name property required" unless="module.name"/>
      <fail message="module.src.dir property required" unless="module.src.dir"/>
      <uptodate property="stage-test-module.uptodate"
          targetfile="${deploy.modules.dir}/${module.name}.module">
          <srcfiles dir="${module.src.dir}/${module.name}" includes="**/*"/>
      </uptodate>
    </target>

    <target name="stage-test-module" depends="stage-test-module.check" unless="stage-test-module.uptodate">
      <fail message="module.name property required" unless="module.name"/>
      <fail message="module.src.dir property required" unless="module.src.dir"/>
      <jar jarfile="${staging.modules.dir}/${module.name}.module">
        <fileset dir="${module.src.dir}/${module.name}">
          <include name="**/*"/>
        </fileset>
      </jar>
      <delete dir="${deploy.modules.dir}/${module.name}"/>
      <delete file="${deploy.modules.dir}/${module.name}.module"/>
    </target>

    <target name="continue" description="Continue running a stopped or failed test suite">
        <property name="suite" value="CONTINUE"/>
        <antcall inheritall="true" target="sub-selenium">
            <param name="debug.suspend.selenium" value="n" />
        </antcall>
    </target>

    <target name="continue-debug" description="Continue running a stopped or failed test suite, suspend until debugger attaches">
        <property name="suite" value="CONTINUE"/>
        <antcall inheritall="true" target="sub-selenium">
            <param name="debug.suspend.selenium" value="y" />
        </antcall>
    </target>

    <target name="study" description="Run Study Tests Only">
        <property name="suite" value="Study"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="ms2t" description="Run all MS2 module tests only">
        <property name="suite" value="MS2"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="ms2t-debug">
        <property name="suite" value="MS2"/>
        <property name="debug.suspend.selenium" value="y"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="cluster" description="Run MS2 module cluster pipeline tests only">
        <property name="suite" value="Cluster"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="cluster-debug" description="Run MS2 module cluster pipeline tests only">
        <property name="suite" value="Cluster"/>
        <property name="debug.suspend.selenium" value="y"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="init-selenium">
        <condition property="sysprop.selenium.server" value="localhost">
            <not>
                <isset property="selenium.server"/>
            </not>
        </condition>
        <condition property="sysprop.selenium.server" value="${selenium.server}">
             <isset property="selenium.server"/>
        </condition>

        <condition property="sysprop.selenium.server.port" value="4444">
            <not>
                <isset property="selenium.server.port"/>
            </not>
        </condition>
        <condition property="sysprop.selenium.server.port" value="${selenium.server.port}">
             <isset property="selenium.server.port"/>
        </condition>

        <condition property="local.selenium.server">
            <equals arg1="localhost" arg2="${sysprop.selenium.server}" />
        </condition>
        <echo message="Checking if Selenium server needs to be started..." />
        <condition property="selenium.server.needs.starting">
            <and>
                <not>
                    <socket server="${sysprop.selenium.server}" port="${sysprop.selenium.server.port}"/>
                </not>
                <isset property="local.selenium.server"/>
            </and>
        </condition>
        <echo message="Selenium Server Properties" />
        <echo message=" selenium.server: ${sysprop.selenium.server}"/>
        <echo message=" selenium.server.port: ${sysprop.selenium.server.port}" />
        <echo message=" selenium.server.needs.starting: ${selenium.server.needs.starting}" />
    </target>

    <target name="sub-selenium" depends="build-java-client,init-selenium" >
        <antcall target="startSeleniumServer" />
        <condition property="no.selenium.server">
            <not >
                <socket server="${sysprop.selenium.server}" port="${sysprop.selenium.server.port}"/>
            </not>
        </condition>
        <fail if="no.selenium.server" message="Could not find selenium server ${sysprop.selenium.server} port ${sysprop.selenium.server.port}"/>

        <antcall inheritall="true" target="runsuite">
            <param name="debug.suspend" value="${debug.suspend.selenium}" />
        </antcall>

        <antcall target="stopSeleniumServer" />
    </target>

    <target name="set-debug-props">
        <condition property="debug.suspend.selenium" value="${debug.suspend.selenium}" else="n">
            <isset property="debug.suspend.selenium"/>
        </condition>
    </target>

    <target name="runsuite-selenium-tomcat" depends="stopSeleniumServer,compile,ensurePassword,deploy-test-modules,set-user-props,set-debug-props">
        <fail unless="tomcat.home" />
        <ant inheritall="true" dir="${project.root}/server" antfile="${project.root}/server/build.xml" target="start_tomcat_teamcity" />
        <antcall target="waitfor-labkey-started"/>

        <antcall target="startSeleniumServer" />

        <condition property="no.selenium.server">
            <not >
                <socket server="${sysprop.selenium.server}" port="${sysprop.selenium.server.port}"/>
            </not>
        </condition>
        <fail if="no.selenium.server" message="Could not find selenium server ${sysprop.selenium.server} port ${sysprop.selenium.server.port}"/>

        <condition property="sysprop.suiteToUse" value="${sysprop.moduleSuite}">
            <isset property="sysprop.moduleSuite"/>
        </condition>
        <condition property="sysprop.suiteToUse" value="${sysprop.suite}">
            <not><isset property="sysprop.moduleSuite"/></not>
        </condition>

        <junit fork="true" forkmode="once" maxmemory="512m"
                errorproperty="suite.failed" failureproperty="suite.failed"
                haltonfailure="false" haltonerror="false" showoutput="true">
            <jvmarg value="-Xmx512m"/>
            <jvmarg value="-Xdebug" />
            <jvmarg value="-Duser.timezone=${sysprop.timezone}" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=${debug.suspend.selenium},address=${sysprop.selenium.debug.port}" />
            <classpath refid="test.run.classpath"/>
            <sysproperty key="suite" value="${sysprop.suiteToUse}"/>
            <sysproperty key="cleanOnly" value="${sysprop.cleanOnly}"/>
            <sysproperty key="test" value="${sysprop.test}"/>
            <sysproperty key="clean" value="${sysprop.clean}"/>
            <sysproperty key="loop" value="${sysprop.loop}"/>
            <sysproperty key="linkCheck" value="${sysprop.linkCheck}"/>
            <sysproperty key="injectCheck" value="${sysprop.injectCheck}"/>
            <sysproperty key="memCheck" value="${sysprop.memCheck}"/>
            <sysproperty key="scriptCheck" value="${sysprop.scriptCheck}"/>
            <sysproperty key="queryCheck" value="${sysprop.queryCheck}"/>
            <sysproperty key="viewCheck" value="${sysprop.viewCheck}"/>
            <sysproperty key="failure.output.dir" value="${test.log.output.dir}"/>
            <sysproperty key="labkey.root" value="${project.root}"/>
            <sysproperty key="labkey.port" value="${sysprop.labkey.port}"/>
            <sysproperty key="labkey.server" value="${sysprop.labkey.server}"/>
            <sysproperty key="labkey.contextpath" value="${sysprop.labkey.contextpath}"/>
            <sysproperty key="selenium.server.port" value="${sysprop.selenium.server.port}" />
            <sysproperty key="selenium.server" value="${sysprop.selenium.server}" />
            <sysproperty key="selenium.browser" value="${sysprop.selenium.browser}"/>
            <sysproperty key="selenium.browser.path" value="${sysprop.selenium.browser.path}"/>
            <sysproperty key="testRecentlyFailed" value="${sysprop.testRecentlyFailed}" />
            <sysproperty key="teamcity.tests.recentlyFailedTests.file" value="${sysprop.teamcity.tests.recentlyFailedTests.file}" />
            <sysproperty key="testNewAndModified" value="${sysprop.testNewAndModified}" />
            <sysproperty key="teamcity.build.changedFiles.file" value="${sysprop.teamcity.build.changedFiles.file}" />
            <sysproperty key="shuffleTests" value="${sysprop.shuffleTests}" />
            <sysproperty key="disableAssertions" value="${sysprop.disableAssertions}"/>
            <sysproperty key="devMode" value="${sysprop.devMode}"/>
            <sysproperty key="maxTestFailures" value="${maxTestFailures}"/>
            <sysproperty key="databaseType" value="${sysprop.databaseType}"/>
            <sysproperty key="databaseVersion" value="${sysprop.databaseVersion}"/>
            <sysproperty key="enableFirebugPanels" value="${sysprop.enableFirebugPanels}"/>
            <sysproperty key="enableFirefoxExtensions" value="${sysprop.enableFirefoxExtensions}"/>
            <sysproperty key="webdriver.ie.driver" value="${webdriver.ie.driver}"/>
            <sysproperty key="webdriver.chrome.driver" value="${webdriver.chrome.driver}"/>

            <formatter type="brief"/>
            <formatter type="xml"/>

            <test name="org.labkey.test.Runner"
                todir="${test.log.output.dir}" outfile="${sysprop.suite}-results"/>
        </junit>
        <ant inheritall="true" dir="${project.root}/server" antfile="${project.root}/server/build.xml" target="stop_tomcat"/>
        <antcall target="waitfor-tomcat-shutdown"/>
        <echo message="Copying log files from ${tomcat.home}/logs/ to ${test.log.output.dir}/${databaseType}/" />
        <mkdir dir="${test.log.output.dir}/${databaseType}" />
        <copy todir="${test.log.output.dir}/${databaseType}">
            <fileset dir="${tomcat.home}/logs/">
                <size value="0" units="k" when="more" />
            </fileset>
        </copy>

        <antcall target="stopSeleniumServer" />

        <antcall target="fail_message"/>
    </target>

    <target name="waitfor-tomcat-shutdown">
      <property name="server.url" value="${sysprop.labkey.server}:${sysprop.labkey.port}"/>

      <echo message="waiting for the server to shutdown: ${server.url}"/>
      <waitfor maxwait="2" maxwaitunit="minute">
          <or>
            <not><socket server="${sysprop.labkey.server}" port="${sysprop.labkey.port}"/></not>
            <not><equals arg1="${sysprop.labkey.server}" arg2="localhost"/></not>
          </or>
      </waitfor>
    </target>

    <target name="ensure-tomcat-shutdown" if="tomcat.debug" depends="prepare">
        <path id="shutdown.build.classpath">
            <!-- Put two paths for tools.jar on the classpath, in case java.home is pointed at the JRE in the ./jre
                 subdirectory of the JDK -->
            <pathelement path="${java.home}/lib/tools.jar"/>
            <pathelement path="${java.home}/../lib/tools.jar"/>
        </path>
        <path id="shutdown.run.classpath">
            <path refid="shutdown.build.classpath" />
            <pathelement path="${test.build.home}/classes"/>
        </path>
        <javac srcdir="${test.src.home}/org/labkey/test/debug"
            destdir="${test.build.home}/classes"
            deprecation="${test.compile.deprecation}"
            optimize="${test.compile.optimize}"
            source="1.7"
            classpathref="shutdown.build.classpath"
            includeantruntime="false" />
        <java classname="org.labkey.test.debug.ThreadDumpAndKill" failonerror="false">
            <classpath refid="shutdown.run.classpath"/>
            <arg value="${tomcat.debug}"/>
        </java>
    </target>

    <target name="fail_message" if="suite.failed">
        <echo message="${sysprop.suiteToUse} FAILED"/>
    </target>

    <target name="startSeleniumServer" description="start selenium server" if="selenium.server.needs.starting" depends="init-selenium">
        <echo message="Starting selenium server on local server, port ${sysprop.selenium.server.port}."/>
        <echo message="Server will stop after successful tests."/>
        <echo message="Or use ant stopSeleniumServer to stop manually."/>
        <echo message="Setting selenium server's PATH to: ${env.FIREFOX_HOME}:${env.PATH}" level="verbose"/>
        <delete file="selenium.log"/>
        <java spawn="true" fork="true" classname="org.openqa.selenium.server.SeleniumServer">
            <classpath refid="test.lib.selenium.classpath" />
            <env key="PATH" path="${env.FIREFOX_HOME}:${env.PATH}"/>
            <arg value="-port" />
            <arg value="${sysprop.selenium.server.port}" />
            <arg value="-Dcaching=true"/>
            <arg value="-log"/>
            <arg value="selenium.log"/>
        </java>
        <echo message="Checking for Selenium Server on port ${sysprop.selenium.server.port}" />
        <waitfor maxwait="60" maxwaitunit="second" checkevery="2" checkeveryunit="second" timeoutproperty="noSeleniumServer">
            <socket server="localhost" port="${sysprop.selenium.server.port}"/>
        </waitfor>

        <antcall target="validateSeleniumStartup" />

        <echo message="Selenium Server started successfully" />
    </target>

    <target name="validateSeleniumStartup" if="noSeleniumServer">
        <ant inheritall="true" antfile="${project.root}/server/build.xml" target="stop_tomcat"/>
        <fail message="Selenium server did not start." />
    </target>

    <target name="drt" description="run developer regression tests">
        <property name="debug.suspend.selenium" value="n"/>
        <property name="suite" value="DRT"/>
        <property name="selenium.browser" value="*best"/>
        <antcall target="sub-selenium"/>
    </target>


    <target name="unit-tests" description="run junit tests">
        <property name="debug.suspend.selenium" value="n"/>
        <property name="suite" value="UnitTests"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="drt-debug" description="run drt, suspend until debugger attaches">
        <property name="debug.suspend.selenium" value="y"/>
        <property name="selenium.browser" value="*best"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="stopSeleniumServer" description="stop selenium server" depends="init-selenium">
        <echo message="Stopping selenium server." />
        <condition property="selenium.server.shut.down">
            <http url="http://localhost:${sysprop.selenium.server.port}/selenium-server/driver/?cmd=shutDownSeleniumServer"/>
        </condition>
    </target>

    <target name="module" description="Run Module test only">
        <property name="suite" value="Module"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium">
        </antcall>
    </target>

    <target name="module-debug">
        <property name="suite" value="Module"/>
        <property name="debug.suspend.selenium" value="y"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="xtandem" description="Run X! Tandem tests only">
        <property name="suite" value="XTandem"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="xtandem-debug">
        <property name="suite" value="XTandem"/>
        <property name="debug.suspend.selenium" value="y"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="mascot" description="Run Mascot tests only">
        <property name="suite" value="Mascot"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="mascot-debug">
        <property name="suite" value="Mascot"/>
        <property name="debug.suspend.selenium" value="y"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="sequest" description="Run Sequest tests only">
        <property name="suite" value="Sequest"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="flow" description="Run Flow tests only">
        <property name="suite" value="Flow"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="sequest-debug">
        <property name="suite" value="Sequest"/>
        <property name="debug.suspend.selenium" value="y"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="drt-clean">
        <property name="suite" value="DRT"/>
        <property name="cleanOnly" value="true"/>
        <property name="selenium.browser" value="*best"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="perf" description="run build verification tests">
        <property name="suite" value="Perf"/>
        <property name="debug.suspend.selenium" value="n"/>
        <property name="linkCheck" value="true"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="bvt" description="run build verification tests">
        <property name="suite" value="BVT"/>
        <property name="debug.suspend.selenium" value="n"/>
        <property name="linkCheck" value="true"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="bvt-debug" description="run bvt, suspend until debugger attaches">
        <property name="suite" value="BVT"/>
        <property name="debug.suspend.selenium" value="y"/>
        <property name="linkCheck" value="true"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="bvt-clean">
        <property name="suite" value="BVT"/>
        <property name="cleanOnly" value="true"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="daily" description="run daily verification tests">
        <property name="suite" value="Daily"/>
        <property name="debug.suspend.selenium" value="n"/>
        <property name="linkCheck" value="true"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="daily-debug" description="run daily verification tests">
        <property name="suite" value="Daily"/>
        <property name="debug.suspend.selenium" value="y"/>
        <property name="linkCheck" value="true"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="daily-clean" description="run daily verification tests">
        <property name="suite" value="Daily"/>
        <property name="cleanOnly" value="true"/>
        <antcall inheritall="true" target="sub-selenium"/>
    </target>

    <target name="test" description="runs UI for selecting and running specific tests">
        <property name="suite" value="TEST"/>
        <property name="debug.suspend.selenium" value="n"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="test-debug">
        <property name="suite" value="TEST"/>
        <property name="debug.suspend.selenium" value="y"/>
        <antcall target="sub-selenium"/>
    </target>

    <target name="init_database_properties">
        <!-- All we want are database names (loading jdbcURL and other properties now will cause problems) -->
        <loadproperties srcfile="${project.root}/server/config.properties">
            <filterchain>
                <linecontains>
                    <contains value="database"/>
                </linecontains>
            </filterchain>
        </loadproperties>
    </target>

    <target name="set-user-props" depends="init_database_properties">
        <!-- Set property sysprop.test: empty string if not provided, user string otherwise -->
        <condition property="sysprop.test" value="">
            <not><isset property="test"/></not>
        </condition>
        <condition property="sysprop.test" value="${test}">
            <isset property="test"/>
        </condition>

        <!-- Set property sysprop.cleanOnly: true or false -->
        <condition property="sysprop.cleanOnly" value="false">
            <not><isset property="cleanOnly"/></not>
        </condition>
        <condition property="sysprop.cleanOnly" value="${cleanOnly}">
            <isset property="cleanOnly"/>
        </condition>

        <!-- Set property sysprop.haltOnError: true or false -->
        <condition property="sysprop.haltOnError" value="true">
            <not>
                <isset property="haltOnError"/>
            </not>
        </condition>
        <condition property="sysprop.haltOnError" value="${haltOnError}">
            <isset property="haltOnError"/>
        </condition>

        <!-- Set property sysprop.loop: true or false -->
        <condition property="sysprop.loop" value="false">
            <not>
                <isset property="loop"/>
            </not>
        </condition>
        <condition property="sysprop.loop" value="${loop}">
            <isset property="loop"/>
        </condition>

        <!-- Set property sysprop.noclean: true or false -->
        <condition property="sysprop.clean" value="true">
            <not>
                <isset property="clean"/>
            </not>
        </condition>
        <condition property="sysprop.clean" value="${clean}">
            <isset property="clean"/>
        </condition>

        <!-- Set property sysprop.linkCheck: true or false -->
        <condition property="sysprop.linkCheck" value="false">
            <not>
                <isset property="linkCheck"/>
            </not>
        </condition>
        <condition property="sysprop.linkCheck" value="${linkCheck}">
            <isset property="linkCheck"/>
        </condition>

        <!-- Set property sysprop.injectCheck: true or false -->
        <condition property="sysprop.injectCheck" value="false">
            <not>
                <isset property="injectCheck"/>
            </not>
        </condition>
        <condition property="sysprop.injectCheck" value="${injectCheck}">
            <isset property="injectCheck"/>
        </condition>

        <!-- Set property sysprop.memCheck: true or false -->
        <condition property="sysprop.memCheck" value="true">
            <not>
                <isset property="memCheck"/>
            </not>
        </condition>
        <condition property="sysprop.memCheck" value="${memCheck}">
            <isset property="memCheck"/>
        </condition>

        <!-- Set property sysprop.scriptCheck: true or false -->
        <condition property="sysprop.scriptCheck" value="true">
            <not>
                <isset property="scriptCheck"/>
            </not>
        </condition>
        <condition property="sysprop.scriptCheck" value="${scriptCheck}">
            <isset property="scriptCheck"/>
        </condition>

        <!-- Set property sysprop.queryCheck: true or false -->
        <condition property="sysprop.queryCheck" value="true">
            <not>
                <isset property="queryCheck"/>
            </not>
        </condition>
        <condition property="sysprop.queryCheck" value="${queryCheck}">
            <isset property="queryCheck"/>
        </condition>

        <!-- Set property sysprop.viewCheck: true or false -->
        <condition property="sysprop.viewCheck" value="${viewCheck}" else="false">
            <isset property="viewCheck"/>
        </condition>

        <!-- Set property sysprop.labkey.port: user provided or '8080' -->
        <condition property="sysprop.labkey.port" value="8080">
            <not>
                <isset property="labkey.port"/>
            </not>
        </condition>
        <condition property="sysprop.labkey.port" value="${labkey.port}">
            <isset property="labkey.port"/>
        </condition>

        <!-- Set property sysprop.labkey.server: user provided or 'http://localhost' -->
        <condition property="sysprop.labkey.server" value="http://localhost">
            <not>
                <isset property="labkey.server"/>
            </not>
        </condition>
        <condition property="sysprop.labkey.server" value="${labkey.server}">
            <isset property="labkey.server"/>
        </condition>

        <!-- Set property sysprop.cpas.contextpath: user provided or '/labkey' -->
        <condition property="sysprop.labkey.contextpath" value="/labkey">
            <not>
                <isset property="labkey.contextpath"/>
            </not>
        </condition>
        <condition property="sysprop.labkey.contextpath" value="${labkey.contextpath}">
            <isset property="labkey.contextpath"/>
        </condition>

        <!-- Set property sysprop.closeOnFail: true or false -->
        <condition property="sysprop.close.on.fail" value="false">
            <not>
                <isset property="close.on.fail"/>
            </not>
        </condition>
        <condition property="sysprop.close.on.fail" value="${close.on.fail}">
            <isset property="close.on.fail"/>
        </condition>

        <!-- Set property sysprop.selenium.browser -->
        <condition property="sysprop.selenium.browser" value="*best">
            <not>
                <isset property="selenium.browser"/>
            </not>
        </condition>
        <condition property="sysprop.selenium.browser" value="${selenium.browser}">
            <isset property="selenium.browser"/>
        </condition>

        <!-- Set property sysprop.selenium.debug.port -->
        <condition property="sysprop.selenium.debug.port" value="${selenium.debug.port}" else="5005">
            <isset property="selenium.debug.port"/>
        </condition>

        <!-- Set property sysprop.selenium.browser.path -->
        <condition property="sysprop.selenium.browser.path" value="">
            <not>
                <isset property="selenium.browser.path"/>
            </not>
        </condition>
        <condition property="sysprop.selenium.browser.path" value="${selenium.browser.path}">
            <isset property="selenium.browser.path"/>
        </condition>

        <!-- Set property sysprop.teamcity.tests.recentlyFailedTests.file : Absolute path -->
        <condition property="sysprop.teamcity.tests.recentlyFailedTests.file" value="${teamcity.tests.recentlyFailedTests.file}" else="">
            <isset property="teamcity.tests.recentlyFailedTests.file"/>
        </condition>

        <!-- Set property sysprop.teamcity.build.changedFiles.file : Absolute path -->
        <condition property="sysprop.teamcity.build.changedFiles.file" value="${teamcity.build.changedFiles.file}" else="">
            <isset property="teamcity.build.changedFiles.file"/>
        </condition>

        <!-- Set property sysprop.teamcity.tests.runRiskGroupTestsFirst : recentlyFailed, newAndModified, or both/neither -->
        <condition property="sysprop.teamcity.tests.runRiskGroupTestsFirst"  value="${teamcity.tests.runRiskGroupTestsFirst}" else="">
            <isset property="teamcity.tests.runRiskGroupTestsFirst" />
        </condition>

        <!-- Set property testRecentlyFailed : true of false (set in TeamCity) -->
        <condition property="sysprop.testRecentlyFailed" value="true" else="false">
            <contains string="${sysprop.teamcity.tests.runRiskGroupTestsFirst}" substring="recentlyFailed" />
        </condition>

        <!-- Set property testNewModified : true of false (set in TeamCity) -->
        <condition property="sysprop.testNewAndModified" value="true" else="false">
            <contains string="${sysprop.teamcity.tests.runRiskGroupTestsFirst}" substring="newAndModified" />
        </condition>

        <!-- Set property sysprop.shuffleTests: true or false -->
        <condition property="sysprop.shuffleTests" value="${shuffleTests}" else="false">
            <isset property="shuffleTests"/>
        </condition>

        <!-- Set property sysprop.disableAssertions: true or false -->
        <condition property="sysprop.disableAssertions" value="${disableAssertions}" else="false">
            <isset property="disableAssertions"/>
        </condition>

        <!-- Set property sysprop.devMode: true or false -->
        <condition property="sysprop.devMode" value="${devMode}" else="true">
            <isset property="devMode"/>
        </condition>

        <!-- Set property sysprop.databaseType: "pg" or "mssql" -->
        <condition property="sysprop.databaseType" value="${databaseType}" else="">
            <isset property="databaseType"/>
        </condition>

        <!-- Set property sysprop.databaseVersion: db version string we use in TeamCity e.g. 9.1 or 2008 -->
        <condition property="sysprop.databaseVersion" value="${databaseVersion}" else="">
            <isset property="databaseVersion"/>
        </condition>

        <!-- Set property sysprop.enableFirebugPanels. Enables FireBug panels on Firefox. Does nothing for other browsers -->
        <condition property="sysprop.enableFirebugPanels" value="${enableFirebugPanels}" else="false">
            <isset property="enableFirebugPanels"/>
        </condition>

        <!-- Set property sysprop.enableFirefoxExtensions. Enables Firefox extensions. Does nothing for other browsers -->
        <condition property="sysprop.enableFirefoxExtensions" value="${enableFirefoxExtensions}" else="false">
            <isset property="enableFirefoxExtensions"/>
        </condition>

        <!-- Set property sysprop.suite: user provided string or DRT by default -->
        <condition property="sysprop.suite" value="${suite}" else="DRT">
            <isset property="suite"/>
        </condition>

        <!-- Set property sysprop.timezone. Normalizes timezone for tests running on TeamCity -->
        <condition property="sysprop.timezone" value="America/Los_Angeles" else="${user.timezone}">
            <isset property="teamcity.buildType.id"/>
        </condition>

        <condition property="webdriver.ie.driver" value="${test.dir}/bin/windows/amd64/IEDriverServer.exe">
            <and>
                <os family="windows"/>
                <os arch="amd64"/>
            </and>
        </condition>

        <condition property="webdriver.ie.driver" value="${test.dir}/bin/windows/i386/IEDriverServer.exe">
            <and>
                <os family="windows"/>
                <os arch="i386"/>
            </and>
        </condition>

        <condition property="webdriver.chrome.driver" value="${test.dir}/bin/windows/chromedriver2a/chromedriver.exe">
            <and>
                <os family="windows"/>
                <equals arg1="${chromedriver2.alpha}" arg2="true"/>
            </and>
        </condition>

        <condition property="webdriver.chrome.driver" value="${test.dir}/bin/mac/chromedriver2a/chromedriver">
            <and>
                <os family="mac"/>
                <equals arg1="${chromedriver2.alpha}" arg2="true"/>
            </and>
        </condition>

        <condition property="webdriver.chrome.driver" value="${test.dir}/bin/linux/chromedriver2a/chromedriver">
            <and>
                <os family="unix"/>
                <not>
                    <os family="mac" />
                </not>
                <equals arg1="${chromedriver2.alpha}" arg2="true"/>
            </and>
        </condition>

        <condition property="webdriver.chrome.driver" value="${test.dir}/bin/windows/chromedriver.exe">
            <os family="windows"/>
        </condition>

        <condition property="webdriver.chrome.driver" value="${test.dir}/bin/mac/chromedriver">
            <os family="mac"/>
        </condition>

        <condition property="webdriver.chrome.driver" value="${test.dir}/bin/linux/amd64/chromedriver">
            <and>
                <os family="unix"/>
                <os arch="amd64"/>
                <not>
                    <os family="mac" />
                </not>
            </and>
        </condition>

        <condition property="webdriver.chrome.driver" value="${test.dir}/bin/linux/i386/chromedriver">
            <and>
                <os family="unix"/>
                <os arch="i386"/>
                <not>
                    <os family="mac" />
                </not>
            </and>
        </condition>


        <echo message="User property overrides:" />
        <echo message="    suite: ${sysprop.suite}"/>
        <echo message="    tests: ${sysprop.test}"/>
        <echo message="    time zone: ${sysprop.timezone}"/>
        <echo message="    clean up after test: ${sysprop.clean}"/>
        <echo message="    clean up only: ${sysprop.cleanOnly}"/>
        <echo message="    halt on error: ${sysprop.haltOnError}"/>
        <echo message="    loop forever: ${sysprop.loop}"/>
        <echo message="    link check: ${sysprop.linkCheck}"/>
        <echo message="    memory check: ${sysprop.memCheck}"/>
        <echo message="    script check: ${sysprop.scriptCheck}"/>
        <echo message="    query check: ${sysprop.queryCheck}"/>
        <echo message="    view check: ${sysprop.viewCheck}"/>
        <echo message="    labkey.port: ${sysprop.labkey.port}"/>
        <echo message="    target server ${sysprop.labkey.server}"/>
        <echo message="    labkey.contextpath: ${sysprop.labkey.contextpath}"/>
        <echo message="    database: ${sysprop.databaseType} ${sysprop.databaseVersion}" />
        <echo message="    shuffleTests: ${sysprop.shuffleTests}" />
        <echo message="    recently failed tests first (TeamCity only): ${sysprop.testRecentlyFailed}" />
        <echo message="    test modified modules first (TeamCity only): ${sysprop.testNewAndModified}" />
    </target>

    <target name="waitfor-labkey-started">
      <property name="server.started.url" value="${sysprop.labkey.server}:${sysprop.labkey.port}${sysprop.labkey.contextpath}/project/home/begin.view"/>

      <echo message="waiting for the server to start: ${server.started.url}"/>
      <waitfor maxwait="10" maxwaitunit="second" checkevery="100">
          <or>
            <http url="${server.started.url}" />
            <not><equals arg1="${sysprop.labkey.server}" arg2="localhost"/></not>
          </or>
      </waitfor>
    </target>

    <target name="runsuite" depends="compile,ensurePassword,deploy-test-modules,set-user-props,waitfor-labkey-started">
        <junit fork="true" forkmode="once" maxmemory="512m" showoutput="true"
                errorproperty="suite.failed" failureproperty="suite.failed"
                haltonfailure="${sysprop.haltOnError}"
                haltonerror="${sysprop.haltOnError}">
            <jvmarg value="-Xdebug" />
            <jvmarg value="-Xmx512m"/>
            <jvmarg value="-Duser.timezone=${sysprop.timezone}" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=${debug.suspend},address=${sysprop.selenium.debug.port}" />
            <jvmarg value="-Djava.compiler=NONE" />
            <classpath refid="test.run.classpath" />
            <sysproperty key="suite" value="${sysprop.suite}"/>
            <sysproperty key="cleanOnly" value="${sysprop.cleanOnly}"/>
            <sysproperty key="test" value="${sysprop.test}"/>
            <sysproperty key="clean" value="${sysprop.clean}"/>
            <sysproperty key="loop" value="${sysprop.loop}"/>
            <sysproperty key="linkCheck" value="${sysprop.linkCheck}"/>
            <sysproperty key="injectCheck" value="${sysprop.injectCheck}"/>
            <sysproperty key="memCheck" value="${sysprop.memCheck}"/>
            <sysproperty key="scriptCheck" value="${sysprop.scriptCheck}"/>
            <sysproperty key="queryCheck" value="${sysprop.queryCheck}"/>
            <sysproperty key="viewCheck" value="${sysprop.viewCheck}"/>
            <sysproperty key="disableAssertions" value="${sysprop.disableAssertions}"/>
            <sysproperty key="devMode" value="${sysprop.devMode}"/>
            <sysproperty key="failure.output.dir" value="${test.log.output.dir}"/>
            <sysproperty key="labkey.root" value="${project.root}"/>
            <sysproperty key="labkey.port" value="${sysprop.labkey.port}"/>
            <sysproperty key="labkey.server" value="${sysprop.labkey.server}"/>
            <sysproperty key="labkey.contextpath" value="${sysprop.labkey.contextpath}"/>
            <sysproperty key="close.on.fail" value="${sysprop.close.on.fail}"/>
            <sysproperty key="selenium.browser" value="${sysprop.selenium.browser}"/>
            <sysproperty key="selenium.browser.path" value="${sysprop.selenium.browser.path}"/>
            <sysproperty key="selenium.server.port" value="${sysprop.selenium.server.port}" />
            <sysproperty key="selenium.server" value="${sysprop.selenium.server}" />
            <sysproperty key="testRecentlyFailed" value="${sysprop.testRecentlyFailed}" />
            <sysproperty key="teamcity.tests.recentlyFailedTests.file" value="${sysprop.teamcity.tests.recentlyFailedTests.file}" />
            <sysproperty key="testNewAndModified" value="${sysprop.testNewAndModified}" />
            <sysproperty key="teamcity.build.changedFiles.file" value="${sysprop.teamcity.build.changedFiles.file}" />
            <sysproperty key="shuffleTests" value="${sysprop.shuffleTests}" />
            <sysproperty key="maxTestFailures" value="${maxTestFailures}"/>
            <sysproperty key="databaseType" value="${sysprop.databaseType}"/>
            <sysproperty key="databaseVersion" value="${sysprop.databaseVersion}"/>
            <sysproperty key="enableFirebugPanels" value="${sysprop.enableFirebugPanels}"/>
            <sysproperty key="enableFirefoxExtensions" value="${sysprop.enableFirefoxExtensions}"/>
            <sysproperty key="webdriver.ie.driver" value="${webdriver.ie.driver}"/>
            <sysproperty key="webdriver.chrome.driver" value="${webdriver.chrome.driver}"/>

            <formatter type="brief"/>
            <formatter type="xml"/>

            <test name="org.labkey.test.Runner"
                todir="${test.log.output.dir}" outfile="${sysprop.suite}-results"/>
        </junit>
    </target>

    <target name="runsuite-tomcat" depends="compile,ensurePassword,deploy-test-modules,set-user-props">
        <echo message="Deleting log files from ${tomcat.home}/logs"/>
        <delete failonerror="false" dir="${tomcat.home}/logs" />
        <mkdir dir="${tomcat.home}/logs" />
        <ant inheritall="true" antfile="${project.root}/server/build.xml" target="start_tomcat_teamcity" />
        <antcall target="waitfor-labkey-started"/>

        <junit fork="true" forkmode="once" maxmemory="512m"
                errorproperty="suite.failed" failureproperty="suite.failed"
                haltonfailure="false" showoutput="true">
            <jvmarg value="-Xmx512m"/>
            <jvmarg value="-Duser.timezone=${sysprop.timezone}" />
            <classpath refid="test.run.classpath"/>
            <sysproperty key="suite" value="${sysprop.suite}"/>
            <sysproperty key="cleanOnly" value="${sysprop.cleanOnly}"/>
            <sysproperty key="test" value="${sysprop.test}"/>
            <sysproperty key="clean" value="${sysprop.clean}"/>
            <sysproperty key="loop" value="${sysprop.loop}"/>
            <sysproperty key="linkCheck" value="${sysprop.linkCheck}"/>
            <sysproperty key="injectCheck" value="${sysprop.injectCheck}"/>
            <sysproperty key="memCheck" value="${sysprop.memCheck}"/>
            <sysproperty key="scriptCheck" value="${sysprop.scriptCheck}"/>
            <sysproperty key="queryCheck" value="${sysprop.queryCheck}"/>
            <sysproperty key="viewCheck" value="${sysprop.viewCheck}"/>
            <sysproperty key="disableAssertions" value="${sysprop.disableAssertions}"/>
            <sysproperty key="devMode" value="${sysprop.devMode}"/>
            <sysproperty key="failure.output.dir" value="${test.log.output.dir}"/>
            <sysproperty key="labkey.root" value="${project.root}"/>
            <sysproperty key="labkey.port" value="${sysprop.labkey.port}"/>
            <sysproperty key="labkey.server" value="${sysprop.labkey.server}"/>
            <sysproperty key="labkey.contextpath" value="${sysprop.labkey.contextpath}"/>
            <sysproperty key="testRecentlyFailed" value="${sysprop.testRecentlyFailed}" />
            <sysproperty key="teamcity.tests.recentlyFailedTests.file" value="${sysprop.teamcity.tests.recentlyFailedTests.file}" />
            <sysproperty key="testNewAndModified" value="${sysprop.testNewAndModified}" />
            <sysproperty key="teamcity.build.changedFiles.file" value="${sysprop.teamcity.build.changedFiles.file}" />
            <sysproperty key="shuffleTests" value="${sysprop.shuffleTests}" />
            <sysproperty key="maxTestFailures" value="${maxTestFailures}"/>
            <sysproperty key="databaseType" value="${sysprop.databaseType}"/>
            <sysproperty key="databaseVersion" value="${sysprop.databaseVersion}"/>
            <sysproperty key="enableFirebugPanels" value="${sysprop.enableFirebugPanels}"/>
            <sysproperty key="enableFirefoxExtensions" value="${sysprop.enableFirefoxExtensions}"/>
            <sysproperty key="webdriver.ie.driver" value="${webdriver.ie.driver}"/>
            <sysproperty key="webdriver.chrome.driver" value="${webdriver.chrome.driver}"/>

            <formatter type="brief"/>
            <formatter type="xml"/>

            <test name="org.labkey.test.Runner"
                todir="${test.log.output.dir}" outfile="${sysprop.suite}-results"/>
        </junit>
        <ant inheritall="true" antfile="${project.root}/server/build.xml" target="stop_tomcat"/>
        <echo message="Copying log files from ${tomcat.home}/logs/ to ${test.log.output.dir}/${databaseType}/" />
        <mkdir dir="${test.log.output.dir}/${databaseType}" />
        <copy todir="${test.log.output.dir}/${databaseType}">
            <fileset dir="${tomcat.home}/logs/">
                <size value="0" units="k" when="more" />
            </fileset>
        </copy>

        <ant target="fail_message" inheritall="true"/>
    </target>

    <!-- for testing the TestHelper ui -->
    <target name="testhelper-test" depends="compile,set-user-props">
        <java classname="org.labkey.test.testpicker.TestHelper" fork="true">
            <classpath refid="test.run.classpath"/>
        </java>
    </target>

    <!-- Check if the QC validators JAR needs to be rebuilt, and if so rebuild it -->
    <target name="build-qc-validator">
        <condition property="qc.build.uptodate">
            <and>
                <uptodate targetfile="${project.root}/sampledata/qc/classes">
                    <srcfiles dir="${project.root}/sampledata/qc/src" />
                </uptodate>
                <available file="${project.root}/sampledata/qc/transform.jar"/>
                <available file="${project.root}/sampledata/qc/validator.jar"/>
            </and>
        </condition>
        <antcall target="build-qc-validator-if-dirty" />
    </target>

    <target name="build-qc-validator-if-dirty" unless="qc.build.uptodate">
        <delete dir="${project.root}/sampledata/qc/classes"/>
        <mkdir dir="${project.root}/sampledata/qc/classes"/>
        <javac srcdir="${project.root}/sampledata/qc/src"
            destdir="${project.root}/sampledata/qc/classes"
            debug="${test.compile.debug}"
            deprecation="${test.compile.deprecation}"
            optimize="${test.compile.optimize}"
            source="1.7"
            classpathref="test.build.classpath"
            includeantruntime="false" >
        </javac>

        <condition property="clover.class.path" value="${tomcat.home}/lib" else="">
            <isset property="test.with.clover"/>
        </condition>

        <mkdir dir="${project.root}/sampledata/qc"/>
        <jar destfile="${project.root}/sampledata/qc/validator.jar">
            <fileset dir="${project.root}/build/client-api/java/classes"/>
            <zipfileset src="${project.root}/remoteapi/java/lib/commons-codec-1.2.jar" includes="**/*.class"/>
            <zipfileset src="${project.root}/remoteapi/java/lib/commons-httpclient-3.1.jar" includes="**/*.class"/>
            <zipfileset src="${project.root}/remoteapi/java/lib/commons-logging.jar" includes="**/*.class"/>
            <zipfileset src="${project.root}/remoteapi/java/lib/json_simple-1.1.jar" includes="**/*.class"/>
            <fileset dir="${project.root}/sampledata/qc/classes"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="org.labkey.AssayValidator"/>
                <attribute name="Class-Path" value="${clover.class.path}"/>
            </manifest>
        </jar>
        <jar destfile="${project.root}/sampledata/qc/transform.jar">
            <fileset dir="${project.root}/build/client-api/java/classes"/>
            <zipfileset src="${project.root}/remoteapi/java/lib/commons-codec-1.2.jar" includes="**/*.class"/>
            <zipfileset src="${project.root}/remoteapi/java/lib/commons-httpclient-3.1.jar" includes="**/*.class"/>
            <zipfileset src="${project.root}/remoteapi/java/lib/commons-logging.jar" includes="**/*.class"/>
            <zipfileset src="${project.root}/remoteapi/java/lib/json_simple-1.1.jar" includes="**/*.class"/>
            <fileset dir="${project.root}/sampledata/qc/classes"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="org.labkey.AssayTransform"/>
                <attribute name="Class-Path" value="${clover.class.path}"/>
            </manifest>
        </jar>
    </target>

    <target name="clean-rpackages">
        <delete failonerror="false" dir="${project.root}/sampledata/rlabkey"/>
        <delete failonerror="false" file="${basedir}/rPackageDeployment.timestamp" verbose="true" />
    </target>

    <!-- Rely on our own private file that we touch every time we install R packages to see if they need to be reinstalled -->
    <target name="install-rpackages">
        <uptodate targetfile="${basedir}/rPackageDeployment.timestamp" property="rPackagesUpToDate">
            <srcfiles dir="${project.root}/tools/Rpackages" />
        </uptodate>
        <antcall target="install-rpackages-if-dirty" />
    </target>

    <target name="install-rpackages-if-dirty" unless="rPackagesUpToDate">
        <antcall target="install-rlabkey" />
        <antcall target="install-ruminex" />
        <antcall target="install-flowWorkspace" />
        <antcall target="install-flowStats" />
        <antcall target="install-knitr" />
        <touch file="${basedir}/rPackageDeployment.timestamp" />
    </target>

    <macrodef name="check-R-package-installed">
        <attribute name="package" />
        <attribute name="property" default="@{package}"/>
        <sequential>
            <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey"
                  input="${project.root}/tools/Rpackages/check-installed.R"
                  failifexecutionfails="true" searchpath="true"
                  resultproperty="@{property}.exitcode">
                <arg line="--slave --vanilla --args @{package}"/>
            </exec>

            <uptodate targetfile="${project.root}/sampledata/rlabkey/@{package}" property="@{property}.uptodate">
                <srcfiles dir="${project.root}/tools/Rpackages">
                    <include name="@{package}*.tar.gz" />
                    <include name="install-@{package}-depdendencies.R" />
                </srcfiles>
            </uptodate>

            <condition property="@{property}.installed" value="true">
                <and>
                    <equals arg1="${@{property}.exitcode}" arg2="0" />
                    <isset property="@{property}.uptodate" />
                </and>
            </condition>

            <condition property="@{property}.uninstalled" value="true">
                <or>
                    <equals arg1="${@{property}.exitcode}" arg2="1" />
                    <not><isset property="@{property}.uptodate" /></not>
                </or>
            </condition>
        </sequential>
    </macrodef>

    <target name="check-rlabkey-installed" if="R.present" depends="locate-R">
        <check-R-package-installed package="Rlabkey" />
    </target>

    <target name="install-rlabkey-init">
        <mkdir dir="${project.root}/sampledata/rlabkey"/>
        <copy todir="${project.root}/sampledata/rlabkey">
            <fileset dir="${project.root}/remoteapi/r/test">
                <include name="listArchive.zip"/>
                <include name="vignette.R"/>
                <include name="instwin.r" />
            </fileset>
        </copy>
    </target>

    <target name="install-rlabkey" depends="install-rlabkey-init, install-rlabkey-binary, install-rlabkey-source">
    </target>

    <target name="install-rlabkey-dependencies" if="R.present" depends="check-rlabkey-installed">
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="true" searchpath="true"
              input="${project.root}/tools/Rpackages/install-rlabkey-dependencies.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

	<target name="install-rlabkey-binary" if="Rlabkey.uninstalled" unless="unix" depends="install-rlabkey-dependencies">
		<copy todir="${project.root}/sampledata/rlabkey" overwrite="true">
			<fileset  dir="${project.root}/remoteapi/r/latest" includes="Rlabkey*.zip"/>
		</copy>
        <exec dir="${project.root}/sampledata/rlabkey" executable="${rterm.path}" osfamily="windows"
              input="${project.root}/sampledata/rlabkey/instwin.r" failifexecutionfails="false">
		    <arg line="--vanilla --quiet" />
		</exec>
	</target>

	<target name="install-rlabkey-source" if="Rlabkey.uninstalled" unless="windows" depends="install-rlabkey-dependencies">
		<copy tofile="${project.root}/sampledata/rlabkey/Rlabkey.tar.gz" overwrite="true">
			<fileset  dir="${project.root}/remoteapi/r/latest" includes="Rlabkey*.tar.gz"/>
		</copy>
		<exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="false" searchpath="true">
            <arg line="CMD INSTALL -l ${project.root}/sampledata/rlabkey ${project.root}/sampledata/rlabkey/Rlabkey.tar.gz"/>
		</exec>
	 </target>

    <target name="check-ruminex-installed" if="R.present" depends="locate-R">
        <check-R-package-installed package="Ruminex" />
    </target>

    <target name="install-ruminex-dependencies" if="Ruminex.uninstalled" depends="check-ruminex-installed">
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="true" searchpath="true"
              input="${project.root}/tools/Rpackages/install-ruminex-dependencies.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="install-ruminex" if="Ruminex.uninstalled" depends="install-ruminex-dependencies">
        <copy tofile="${project.root}/sampledata/rlabkey/Ruminex.tar.gz" overwrite="true">
            <fileset  dir="${project.root}/tools/Rpackages" includes="Ruminex*.tar.gz"/>
        </copy>
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey"  failifexecutionfails="false" searchpath="true">
            <arg line="CMD INSTALL -l ${project.root}/sampledata/rlabkey ${project.root}/sampledata/rlabkey/Ruminex.tar.gz" />
        </exec>
    </target>

    <target name="check-flowStats-installed" if="R.present" depends="locate-R">
        <check-R-package-installed package="flowStats"/>
    </target>

    <target name="install-flowStats-dependencies" if="flowStats.uninstalled" depends="check-flowStats-installed">
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="false" searchpath="true"
              input="${project.root}/tools/Rpackages/install-flowStats-dependencies.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="install-flowStats-source" if="flowStats.uninstalled" unless="windows" depends="install-flowStats-dependencies">
        <copy tofile="${project.root}/sampledata/rlabkey/flowStats.tar.gz" overwrite="true">
            <fileset dir="${project.root}/tools/Rpackages" includes="flowStats*.tar.gz"/>
        </copy>
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="false" searchpath="true">
            <arg line="CMD INSTALL --no-multiarch -l ${project.root}/sampledata/rlabkey ${project.root}/sampledata/rlabkey/flowStats.tar.gz" />
        </exec>
    </target>

    <target name="install-flowStats-binary" if="flowStats.uninstalled" unless="unix" depends="install-flowStats-dependencies">
        <copy tofile="${project.root}/sampledata/rlabkey/flowStats.zip" overwrite="true">
            <fileset dir="${project.root}/tools/Rpackages" includes="flowStats*.zip"/>
        </copy>
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="false" searchpath="true">
            <arg line="CMD INSTALL --no-multiarch -l ${project.root}/sampledata/rlabkey ${project.root}/sampledata/rlabkey/flowStats.zip" />
        </exec>
    </target>

    <target name="install-flowStats" depends="install-flowWorkspace, install-flowStats-binary, install-flowStats-source">
    </target>

    <target name="install-knitr" if="R.present" depends="check-rlabkey-installed">
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="true" searchpath="true"
              input="${project.root}/tools/Rpackages/install-knitr.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="check-flowWorkspace-installed" if="R.present" depends="locate-R">
        <check-R-package-installed package="flowWorkspace"/>
    </target>

    <target name="install-flowWorkspace-dependencies" if="flowWorkspace.uninstalled" depends="check-flowWorkspace-installed">
        <!-- flowWorkspace needs R 2.13 installed.  For now we won't fail the build if you don't have R 2.13 installed. -->
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="false" searchpath="true"
              input="${project.root}/tools/Rpackages/install-flowWorkspace-dependencies.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="install-flowWorkspace-source" if="flowWorkspace.uninstalled" unless="windows" depends="install-flowWorkspace-dependencies">
        <copy tofile="${project.root}/sampledata/rlabkey/flowWorkspace.tar.gz" overwrite="true">
            <fileset dir="${project.root}/tools/Rpackages" includes="flowWorkspace*.tar.gz"/>
        </copy>
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="false" searchpath="true">
            <arg line="CMD INSTALL --no-multiarch -l ${project.root}/sampledata/rlabkey ${project.root}/sampledata/rlabkey/flowWorkspace.tar.gz" />
        </exec>
    </target>

    <target name="install-flowWorkspace-binary" if="flowWorkspace.uninstalled" unless="unix" depends="install-flowWorkspace-dependencies">
        <copy tofile="${project.root}/sampledata/rlabkey/flowWorkspace.zip" overwrite="true">
            <fileset dir="${project.root}/tools/Rpackages" includes="flowWorkspace*.zip"/>
        </copy>
        <exec executable="${r.path}" dir="${project.root}/sampledata/rlabkey" failifexecutionfails="false" searchpath="true">
            <arg line="CMD INSTALL --no-multiarch -l ${project.root}/sampledata/rlabkey ${project.root}/sampledata/rlabkey/flowWorkspace.zip" />
        </exec>
    </target>

    <target name="install-flowWorkspace" depends="install-flowWorkspace-binary, install-flowWorkspace-source">
    </target>

    <target name="locate-R">
        <mkdir dir="${project.root}/sampledata/rlabkey"/>

        <condition property="r.path" value="${env.R_HOME}/bin/R.exe"><available file="${env.R_HOME}/bin/R.exe"/></condition>
        <condition property="r.path" value="${env.R_HOME}/bin/R"><available file="${env.R_HOME}/bin/R"/></condition>
        <condition property="r.path" value="${env.R_HOME}/R.exe"><available file="${env.R_HOME}/R.exe"/></condition>
        <condition property="r.path" value="${env.R_HOME}/R" else="R">
            <and>
                <not><isset property="r.path" /></not>
                <isset property="env.R_HOME"/>
            </and>
        </condition>

        <condition property="rterm.path" value="${env.R_HOME}/Rterm.exe"><available file="${env.R_HOME}/Rterm.exe"/></condition>
        <condition property="rterm.path" value="${env.R_HOME}/bin/Rterm.exe"><available file="${env.R_HOME}/bin/Rterm.exe"/></condition>
        <condition property="rterm.path" value="${env.R_HOME}/bin/i386/Rterm.exe"><available file="${env.R_HOME}/bin/i386/Rterm.exe"/></condition>
        <condition property="rterm.path" value="${env.R_HOME}/bin/x64/Rterm.exe"><available file="${env.R_HOME}/bin/x64/Rterm.exe"/></condition>

        <condition property="R.present">
            <or>
                <and>
                    <isset property="windows"/>
                    <available file="${rterm.path}"/>
                </and>
                <and>
                    <isset property="unix"/>
                    <available file="${r.path}"/>
                </and>
            </or>
        </condition>
        <echo message="r.path: ${r.path}"/>
        <echo message="rterm.path: ${rterm.path}"/>
        <antcall target="fail_R"/>
    </target>

    <target name="fail_R" unless="R.present">
        <echo message="Unable to locate R.exe and/or Rterm.exe.  Please ensure that R is installed and R_HOME is configured correctly."/>
    </target>

    <target name="studysampler" depends="compile">
        <copy file="${test.src.home}/org/labkey/test/studysampler/words.txt" todir="${test.build.home}/classes/"/>
        <java classname="org.labkey.test.studysampler.Runner">
            <classpath refid="test.run.classpath"/>
            <!-- set the input dir on the ant command line with -Dstudysampler.dir=/path/to/study/-->
            <arg value="${studysampler.dir}"/>
            <!-- set the subject list on the ant command line with -Dstudysampler.subjectfile=/path/to/file.txt-->
            <arg value="${studysampler.subjectfile}"/>
        </java>
    </target>

    <target name="clover_zip">
        <!-- Create a stable file name so that TeamCity can serve it up directly through its own UI -->
        <zip destfile="${test.log.output.dir}/TeamCity-Clover-Code-Coverage.zip" update="true" >
                <zipfileset dir="${clover.output.dir}" />
         </zip>
    </target>

    <target name="skipfish_init">

        <condition property="skipfish.src.dir" value="${teamcity.agent.home.dir}/plugins/skipfish">
            <available file="${teamcity.agent.home.dir}/plugins/skipfish"/>
        </condition>

        <condition property="skipfish.built" value="true">
            <or>
                <available file="${skipfish.src.dir}/skipfish"/>
                <available file="${skipfish.src.dir}/skipfish.exe"/>
            </or>
        </condition>

        <condition property="skipfish.results.dir" value="${skipfish.results.dir}" else="${skipfish.src.dir}/results">
            <isset property="skipfish.results.dir"/>
        </condition>

        <condition property="skipfish.report.dir" value="${skipfish.report.dir}" else="${skipfish.src.dir}">
            <isset property="skipfish.report.dir"/>
        </condition>

        <condition property="skipfish.wordlist" value="${skipfish.wordlist}" else="new_dict.wl">
            <isset property="skipfish.wordlist"/>
        </condition>

        <condition property="skipfish.supplemental.wordlist" value="${skipfish.supplemental.wordlist}" else="minimal.wl">
            <isset property="skipfish.supplemental.wordlist"/>
        </condition>

        <condition property="sysprop.labkey.port" value="${labkey.port}" else="8080">
            <isset property="labkey.port"/>
        </condition>

        <condition property="sysprop.labkey.server" value="${labkey.server}" else="http://localhost">
            <isset property="labkey.server"/>
        </condition>

        <condition property="sysprop.labkey.contextpath" value="${labkey.contextpath}" else="/labkey">
            <isset property="labkey.contextpath"/>
        </condition>

        <condition property="skipfish.timeout" value="${skipfish.timeout}" else="30">
            <isset property="skipfish.timeout"/>
        </condition>

        <condition property="cygwin.bin" value="${env.CYGWIN_HOME}\bin" else="C:\cygwin\bin">
            <isset property="env.CYGWIN_HOME"/>
        </condition>

        <property name="server.url" value="${sysprop.labkey.server}:${sysprop.labkey.port}${sysprop.labkey.contextpath}"/>

    </target>

    <target name="skipfish_scan" depends="skipfish_init, skipfish_make, skipfish_getCredentials">
        <delete dir="${skipfish.results.dir}"/>

        <touch file="${skipfish.src.dir}/${skipfish.wordlist}"/>
        <exec executable="${skipfish.src.dir}\skipfish.exe" dir="${skipfish.src.dir}" failifexecutionfails="false" osfamily="windows" errorproperty="skipfish.failed">
            <arg value="-u"/>
            <arg value="-o"/>
            <arg value="${skipfish.results.dir}"/>
            <arg value="-S"/>
            <arg value=".\dictionaries\${skipfish.supplemental.wordlist}"/>
            <arg value="-W"/>
            <arg value="${skipfish.wordlist}"/>
            <arg value="-X"/>
            <arg value="/logout.view"/>
            <arg value="-k"/>
            <arg value="${skipfish.timeout}"/>
            <arg value="-A"/>
            <arg value="${skipfish.credentials}"/>
            <arg value="${server.url}"/>
        </exec>
        <exec executable="${skipfish.src.dir}/skipfish" dir="${skipfish.src.dir}" failifexecutionfails="false" osfamily="unix" errorproperty="skipfish.failed">
            <arg value="-u"/>
            <arg value="-o"/>
            <arg value="${skipfish.results.dir}"/>
            <arg value="-S"/>
            <arg value="./dictionaries/${skipfish.supplemental.wordlist}"/>
            <arg value="-W"/>
            <arg value="${skipfish.wordlist}"/>
            <arg value="-X"/>
            <arg value="/logout.view"/>
            <arg value="-k"/>
            <arg value="${skipfish.timeout}"/>
            <arg value="-A"/>
            <arg value="${skipfish.credentials}"/>
            <arg value="${server.url}"/>
        </exec>
    </target>

    <target name="skipfish_make" unless="skipfish.built">
        <exec executable="${cygwin.bin}\make" dir="${skipfish.src.dir}" failifexecutionfails="false" osfamily="windows" errorproperty="skipfish.failed"/>
        <exec executable="make" dir="${skipfish.src.dir}" failifexecutionfails="false" osfamily="unix" errorproperty="skipfish.failed"/>
    </target>

    <target name="skipfish_clean">
        <exec executable="${cygwin.bin}\make" dir="${skipfish.src.dir}" failifexecutionfails="false" osfamily="windows" errorproperty="skipfish.failed">
            <arg value="clean"/>
        </exec>
        <exec executable="make" dir="${skipfish.src.dir}" failifexecutionfails="false" osfamily="unix" errorproperty="skipfish.failed">
            <arg value="clean"/>
        </exec>
    </target>

    <target name="skipfish_teamcity" description="Fire up tomcat and run skipfish" depends="skipfish_init">
        <ant target="start_tomcat_teamcity" inheritall="true" dir="${project.root}/server" antfile="${project.root}/server/build.xml"/>
        <antcall target="waitfor-labkey-started"/>
        <antcall target="skipfish_scan"/>
        <ant target="stop_tomcat" inheritall="true" dir="${project.root}/server" antfile="${project.root}/server/build.xml"/>

        <delete file="${skipfish.report.dir}/skipfish.zip"/>
        <zip destfile="${skipfish.report.dir}/skipfish.zip" update="true" >
            <zipfileset dir="${skipfish.results.dir}"/>
        </zip>

        <antcall target="skipfish_fail"/>
    </target>

    <target name="skipfish_getCredentials" depends="compile">
        <java classname="org.labkey.test.util.PasswordUtil" outputproperty="skipfish.credentials" failonerror="true">
            <classpath refid="test.run.classpath"/>
            <arg id="action" value="getSkipfishCredentials"/>
        </java>
    </target>

    <target name="skipfish_fail" if="skipfish.failed">
        <echo message="Skipfish FAILED"/>
    </target>

</project>
