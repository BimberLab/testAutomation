/*
 * Copyright (c) 2011-2014 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.test.tests;

import org.junit.experimental.categories.Category;
import org.labkey.test.Locator;
import org.labkey.test.WebTestHelper;
import org.labkey.test.categories.Assays;
import org.labkey.test.categories.DailyA;
import org.labkey.test.categories.MiniTest;
import org.labkey.test.util.DataRegionTable;
import org.labkey.test.util.LogMethod;

import java.io.File;

import static org.junit.Assert.assertEquals;

@Category({DailyA.class, MiniTest.class, Assays.class})
public class LuminexJavaTransformTest extends LuminexTest
{
    protected void runUITests()
    {
        runJavaTransformTest();
        runFileUploadTest();
    }

    @LogMethod
    private void runJavaTransformTest()
    {
        // add the transform script to the assay
        log("Uploading Luminex Runs with a transform script");


        //TODO:  goToTestRunList
        clickProject(TEST_ASSAY_PRJ_LUMINEX);
        clickAndWait(Locator.linkWithText(TEST_ASSAY_LUM));
        clickEditAssayDesign(false);

        addTransformScript(new File(WebTestHelper.getLabKeyRoot(), "/sampledata/qc/transform.jar"), 0);
        clickButton("Save & Close");

        goToTestAssayHome();
        clickButton("Import Data");
        setFormElement(Locator.name("species"), TEST_ASSAY_LUM_SET_PROP_SPECIES);
        clickButton("Next");
        setFormElement(Locator.name("name"), "transformed assayId");
        setFormElement(Locator.name("__primaryFile__"), TEST_ASSAY_LUM_FILE1);
        clickButton("Next", 60000);
        clickButton("Save and Finish");

        // verify the description error was generated by the transform script
        clickAndWait(Locator.linkWithText("transformed assayId"), 2 * WAIT_FOR_PAGE);
        DataRegionTable table = new DataRegionTable("Data", this);
        for(int i = 1; i <= 40; i++)
        {
            assertEquals("Transformed", table.getDataAsText(i, "Description"));
        }
    }

    @LogMethod
    private void runFileUploadTest()
    {
        String[] assayNames = {"Test Assay 1", "Test Assay 2", "Test Assay 3"};
        String ERROR_TEXT = "already exists.";

        log("Testing file upload conflict error messages and archive on delete");

        // Create a run that imports 1 file
        createNewAssayRun(assayNames[0]);

        addFilesToAssayRun(TEST_ASSAY_MULTIPLE_STANDARDS_1);
        clickButton("Next");
        clickButton("Save and Finish", 2 * WAIT_FOR_PAGE);

        // Create a second run that imports the file again and check for error message
        createNewAssayRun(assayNames[1]);
        addFilesToAssayRun(TEST_ASSAY_MULTIPLE_STANDARDS_1, TEST_ASSAY_MULTIPLE_STANDARDS_2, TEST_ASSAY_MULTIPLE_STANDARDS_3);
        // verify that conflict error message is present
        waitForText(ERROR_TEXT, WAIT_FOR_JAVASCRIPT);
        clickButton("Next");
        clickButton("Cancel", 2 * WAIT_FOR_PAGE);

        // Delete the first run, files should be archived
        checkCheckbox(Locator.checkboxByName(".select"));
        clickButton("Delete");
        waitForText("Confirm Deletion", WAIT_FOR_JAVASCRIPT);
        clickButton("Confirm Delete");
        waitForText("Description for Luminex assay", WAIT_FOR_JAVASCRIPT);

        // Create a run with a duplicate file within the set of files
        createNewAssayRun(assayNames[2]);
        addFilesToAssayRun(TEST_ASSAY_MULTIPLE_STANDARDS_1, TEST_ASSAY_MULTIPLE_STANDARDS_2, TEST_ASSAY_MULTIPLE_STANDARDS_3, TEST_ASSAY_MULTIPLE_STANDARDS_3);
        // verify that the error message for duplicate entries pops up, and that the first remove button is enabled (checks prior bug)
        waitForText("duplicate", WAIT_FOR_JAVASCRIPT);
        clickButton("OK", 0);
    }
}
