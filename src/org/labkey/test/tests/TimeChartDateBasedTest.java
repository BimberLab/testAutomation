/*
 * Copyright (c) 2012-2013 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.test.tests;

import org.junit.Assert;
import org.labkey.test.Locator;
import org.labkey.test.TestTimeoutException;
import org.labkey.test.util.LogMethod;
import org.labkey.test.util.PortalHelper;

/**
 * User: cnathe
 * Date: 11/5/12
 */
public class TimeChartDateBasedTest extends TimeChartTest
{
    private static final String REPORT_NAME_1 = "TimeChartTest Report";
    private static final String REPORT_NAME_2 = "TimeChartTest 2Report";
    private static final String REPORT_NAME_3 = "TimeChartTest Multi-Measure Report";
    private static final String X_AXIS_LABEL = "New X-Axis Label";
    private static final String Y_AXIS_LABEL = "New Y-Axis Label";
    private static final String CHART_TITLE = "New Chart Title";
    private static final String PER_GROUP = "One Chart Per Group";
    private static final String REPORT_DESCRIPTION = "This is a report generated by the TimeChartDateBasedTest";

    @Override
    @LogMethod protected void doCreateSteps()
    {
        configureStudy();
        windowMaximize();
    }

    @Override
    public void doVerifySteps()
    {
        axisRangeTest();

        createChartTest();

        stdDevRegressionTest();

        visualizationTest();

        generateChartPerParticipantTest();

        saveTest();

        timeChartPermissionsTest();

        pointClickFunctionTest();

        multiMeasureTimeChartTest();

        createParticipantGroups();

        participantGroupTimeChartTest();

        multiAxisTimeChartTest();

        aggregateTimeChartUITest();

        filteredTimeChartRegressionTest();
    }

    private static final String SVG_AXIS_X =              "Created with Rapha\u00ebl 2.1.0HIV Test Results, Lab Results: 249320107050100150200Days Since Start DateViral Load Quantified (copies/ml)50000.0100000.0150000.0200000.0250000.0300000.0350000.0400000.0450000.0500000.0550000.0600000.0650000.0CD4+ (cells/mm3)200.0300.0400.0500.0600.0700.0800.0900.01000.01100.01200.01300.0 249320107 CD4+(cells/mm3) 249320107 Viral LoadQuantified (copies/ml)";
    private static final String SVG_AXIS_X_LEFT =         "Created with Rapha\u00ebl 2.1.0HIV Test Results, Lab Results: 249320107050100150200Days Since Start DateViral Load Quantified (copies/ml)200000.0210000.0220000.0230000.0240000.0250000.0260000.0270000.0CD4+ (cells/mm3)200.0300.0400.0500.0600.0700.0800.0900.01000.01100.01200.01300.0 249320107 CD4+(cells/mm3) 249320107 Viral LoadQuantified (copies/ml)";
    private static final String SVG_AXIS_X_LEFT_RIGHT =   "Created with Rapha\u00ebl 2.1.0HIV Test Results, Lab Results: 249320107050100150200Days Since Start DateViral Load Quantified (copies/ml)200000.0210000.0220000.0230000.0240000.0250000.0260000.0270000.0CD4+ (cells/mm3)250.0300.0350.0400.0450.0500.0550.0600.0 249320107 CD4+(cells/mm3) 249320107 Viral LoadQuantified (copies/ml)";
    private static final String AXIS_TIME_CHART = "Axis Time Chart";
    @LogMethod private void axisRangeTest()
    {
        clickFolder(getFolderName());
        goToManageViews();
        _extHelper.clickMenuButton("Create", "Time Chart");
        clickChooseInitialMeasure();
        _ext4Helper.clickGridRowText("Viral Load Quantified (copies/ml)", 0);
        clickButton("Select", 0);
        waitForElement(Locator.css("svg text").withText("HIV Test Results"));

        enterMeasuresPanel();
        addMeasure();
        _ext4Helper.clickGridRowText("CD4+ (cells/mm3)", 0);
        clickButton("Select", 0);
        waitForElement(Locator.tag("tr").withClass("x4-grid-row-selected").containing("CD4+ (cells/mm3)"));
        _ext4Helper.selectComboBoxItem("Draw y-axis on:", "Right");
        applyChanges();

        goToGroupingTab();
        setNumberOfCharts("One Chart Per Participant");
        applyChanges();

        goToAxisTab("Days Since Start Date");
        click(Locator.id("xaxis_range_automatic_per_chart-inputEl"));
        applyChanges();
        waitForElement(Locator.css("svg").withText(SVG_AXIS_X), WAIT_FOR_JAVASCRIPT, false);
        Assert.assertEquals("Second SVG was not as expected", SVG_AXIS_X, getText(Locator.css("svg").index(1)));

        goToAxisTab("Viral Load Quantified (copies/ml)");
        click(Locator.id("leftaxis_range_automatic_per_chart-inputEl"));
        applyChanges();
        waitForElement(Locator.css("svg").withText(SVG_AXIS_X_LEFT), WAIT_FOR_JAVASCRIPT, false);
        Assert.assertEquals("Second SVG was not as expected", SVG_AXIS_X_LEFT, getText(Locator.css("svg").index(1)));

        goToAxisTab("CD4+ (cells/mm3)");
        click(Locator.id("rightaxis_range_automatic_per_chart-inputEl"));
        applyChanges();
        waitForElement(Locator.css("svg").withText(SVG_AXIS_X_LEFT_RIGHT), WAIT_FOR_JAVASCRIPT, false);
        Assert.assertEquals("Second SVG was not as expected", SVG_AXIS_X_LEFT_RIGHT, getText(Locator.css("svg").index(1)));

        openSaveMenu();
        setFormElement(Locator.name("reportName"), AXIS_TIME_CHART);
        saveReport(true);
    }

    @LogMethod public void createChartTest()
    {
        clickProject(getProjectName());
        clickFolder(getFolderName());
        PortalHelper portalHelper = new PortalHelper(this);
        portalHelper.addWebPart("Views");
        portalHelper.addWebPart("Datasets");
        portalHelper.addWebPart("Specimens");
        goToManageViews();
        _extHelper.clickMenuButton("Create", "Time Chart");
        clickChooseInitialMeasure();
        waitForText("NAbAssay", WAIT_FOR_JAVASCRIPT);

        log("Test measure search.");
        _extHelper.setExtFormElementByType(ADD_MEASURE_DIALOG, "text", "nab");
        sleep(500);
        // Count search results (11 in study's NAb assay)
        Assert.assertEquals("", 11, getXpathCount(Locator.xpath(_extHelper.getExtDialogXPath(ADD_MEASURE_DIALOG) + "//div[contains(@class, 'x4-grid-view')]/table/tbody/tr")) - 1);

        log("Check for appropriate message for measure with no data.");
        _ext4Helper.clickGridRowText("Cutoff Percentage (3)", 0);
        clickButton("Select", 0);
        waitForText("No data found for the following measures/dimensions: RunCutoff3", WAIT_FOR_JAVASCRIPT);
    }

    // Regression test for "11764: Time Chart Wizard raises QueryParseException on 'StdDev' measure"
    @LogMethod public void stdDevRegressionTest()
    {
        log("StdDev regression check");
        enterMeasuresPanel();
        clickButton("Remove Measure", 0);
        applyChanges();
        waitForText("No measure selected.", WAIT_FOR_JAVASCRIPT);
        enterMeasuresPanel();
        addMeasure();
        _ext4Helper.clickGridRowText("StdDev", 0);
        clickButton("Select", 0);
        waitForText("StdDev from LuminexAssay");
        applyChanges();
        waitForText("Days Since Start Date", WAIT_FOR_JAVASCRIPT); // x-axis label
        waitForText("StdDev", WAIT_FOR_JAVASCRIPT); // left-axis label
        waitForText("LuminexAssay", WAIT_FOR_JAVASCRIPT); // main title
    }

    @LogMethod public void visualizationTest()
    {
        log("Check visualization");
        enterMeasuresPanel();
        clickButton("Remove Measure", 0);
        applyChanges();
        waitForText("No measure selected.", WAIT_FOR_JAVASCRIPT);
        enterMeasuresPanel();
        addMeasure();

        _extHelper.setExtFormElementByType(ADD_MEASURE_DIALOG, "text", "viral");
        waitForElementToDisappear(Locator.xpath(_extHelper.getExtDialogXPath(ADD_MEASURE_DIALOG) + "//div[contains(@class, 'x4-grid-view')]/table/tbody/tr").index(2), WAIT_FOR_JAVASCRIPT);
        _ext4Helper.clickGridRowText("Viral Load Quantified (copies/ml)", 0);
        clickButton("Select", 0);
        waitForText("Viral Load Quantified (copies/ml) from HIV Test Results");
        applyChanges();
        waitForText("Days Since Start Date", WAIT_FOR_JAVASCRIPT); // x-axis label
        waitForText("Viral Load Quantified (copies/ml)", WAIT_FOR_JAVASCRIPT); // left-axis label
        waitForText("HIV Test Results", WAIT_FOR_JAVASCRIPT); // main title
        assertTextNotPresent("No data found");

        clickButton("View Data", 0);
        waitForElement(Locator.paginationText(33));
        _ext4Helper.checkGridRowCheckbox("249325717");
        waitForElement(Locator.paginationText(38));
        _ext4Helper.uncheckGridRowCheckbox("249320127");
        waitForElement(Locator.paginationText(31));

        // verify column headers for date based plotting option
        assertTextPresent("Participant ID");
        assertTextPresent("Visit Date");
        assertTextPresent("Visit");
        assertTextPresent("Viral Load Quantified");
        assertTextPresent("Start Date");
        assertTextPresent("Days");
        assertTextNotPresent("sequencenum");

        log("Test X-Axis");
        clickButton("View Chart(s)", 0);
        _ext4Helper.waitForMaskToDisappear();
        goToAxisTab("Days Since Start Date");
        _ext4Helper.selectComboBoxItemById("xaxis_interval", "Weeks");
        applyChanges();
        waitForText("Weeks Since Start Date", WAIT_FOR_JAVASCRIPT);
        goToAxisTab("Weeks Since Start Date");
        setAxisValue(Axis.X, null, null, null, X_AXIS_LABEL, null, null, new String[]{X_AXIS_LABEL}, null);

        goToAxisTab(X_AXIS_LABEL);
        _ext4Helper.selectComboBoxItemById("xaxis_interval", "Days");
        Assert.assertEquals(X_AXIS_LABEL, getFormElement(Locator.name("x-axis-label-textfield"))); // Label shouldn't change automatically once it has been set manually

        // set manual x-axis range
        goToAxisTab(X_AXIS_LABEL);
        setAxisValue(Axis.X, "xaxis_range_manual", "15", "40", null, null, null, new String[] {"15", "20", "25", "30", "35", "40"}, null);

        log("Test Y-Axis");
        goToAxisTab("Viral Load Quantified (copies/ml)");
        setAxisValue(Axis.LEFT, "leftaxis_range_manual", "200000", "400000", Y_AXIS_LABEL, null, null, new String[] {Y_AXIS_LABEL}, new String[] {"500000","200000"});
        goToAxisTab(Y_AXIS_LABEL);
        setAxisValue(Axis.LEFT, "leftaxis_range_manual", "10000", "1000000", null, "leftaxis_scale", "Log", new String[] {"100000"}, null );
    }

    @LogMethod public void generateChartPerParticipantTest()
    {
        goToGroupingTab();
        setParticipantSelection(PARTICIPANTS);
        setNumberOfCharts(ONE_CHART_PER_PARTICIPANT);
        _extHelper.uncheckCheckbox("Show Mean"); // select show mean
        _extHelper.checkCheckbox("Show Individual Lines"); // de-select show individual lines
        applyChanges();
        waitForText("HIV Test Results: 249318596");
        assertTextPresentInThisOrder("HIV Test Results: 249318596", "HIV Test Results: 249320107", "HIV Test Results: 249320489");

        goToMainTitleTab("HIV Test Results: 249318596");
        setChartTitle(CHART_TITLE);
        applyChanges();
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 6); // 5 for individual chart titles + 1 for chart title in thumbnail preview on save dialog

        // re-select participant
        _ext4Helper.checkGridRowCheckbox("249320127");
        waitForText(CHART_TITLE + ": 249320127", WAIT_FOR_JAVASCRIPT);
        assertTextPresent(CHART_TITLE, 7); // 6 for individual chart titles + 1 for chart title in thumbnail preview on save dialog
    }

    @LogMethod public void saveTest()
    {
        openSaveMenu();
        assertTextPresent("Report Name");
        _extHelper.setExtFormElementByLabel("Report Name:", REPORT_NAME_1);
        _extHelper.setExtFormElementByLabel("Report Description:", REPORT_DESCRIPTION);
        saveReport(true);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 6); // once for each individual chart title (note: save dialog thumbnail preview hasn't been rendered yet)

        clickButton("Save As", 0);
        waitForText("Report Name");
        _extHelper.setExtFormElementByLabel("Report Name:", REPORT_NAME_2);
        _extHelper.setExtFormElementByLabel("Report Description:", "This is another report generated by the TimeChartTest");
        _ext4Helper.selectRadioButton("Viewable By:", "Only me");
        saveReport(true);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 6); // once for each individual chart title (note: save dialog thumbnail preview hasn't been rendered yet)

        log("Verify saved report");
        goToManageViews();
        waitForText(REPORT_NAME_1, WAIT_FOR_JAVASCRIPT);
        assertTextPresent(REPORT_NAME_2);
        click(Locator.tagWithText("div", REPORT_NAME_1));
        assertTextPresent(REPORT_DESCRIPTION);
        clickAndWait(Locator.xpath("//a[text()='edit' and contains(@href, '"+REPORT_NAME_1.replace(" ", "%20")+"')]"));
        waitForText(X_AXIS_LABEL, WAIT_FOR_JAVASCRIPT);
        assertTextPresent(CHART_TITLE, 6); // once for each individual chart title (note: save dialog thumbnail preview hasn't been rendered yet)
        pushLocation();
        pushLocation();
    }

    @LogMethod public void timeChartPermissionsTest()
    {
        log("Check Time Chart Permissions");
        createUser(USER1, null);
        clickProject(getProjectName());
        clickFolder(getFolderName());
        enterPermissionsUI();
        setUserPermissions(USER1, "Reader");
        _securityHelper.setSiteGroupPermissions("Guests", "Reader");
        clickButton("Save and Finish");
        impersonate(USER1);
        popLocation(); // Saved chart
        waitForText(CHART_TITLE);
        assertElementNotPresent(Locator.button("Edit"));
        assertElementNotPresent(Locator.button("Save"));
        assertElementPresent(Locator.button("Save As"));
        clickFolder(getFolderName());
        assertTextNotPresent(REPORT_NAME_2);
        stopImpersonating();
        signOut();
        popLocation(); // Saved chart
        waitForText(CHART_TITLE);
        assertElementNotPresent(Locator.button("Save"));
        assertElementNotPresent(Locator.button("Save As"));
        simpleSignIn();
    }

    @LogMethod public void pointClickFunctionTest()
    {
        log("Check Time Chart Point Click Function (Developer Only)");
        clickProject(getProjectName());
        clickFolder(getFolderName());
        goToManageViews();
        waitForText(REPORT_NAME_1, WAIT_FOR_JAVASCRIPT);
        click(Locator.tagWithText("div", REPORT_NAME_1));
        clickAndWait(Locator.xpath("//a[text()='edit' and contains(@href, '"+REPORT_NAME_1.replace(" ", "%20")+"')]"));
        waitForText(X_AXIS_LABEL, WAIT_FOR_JAVASCRIPT);
        // change to the data points are visible again
        goToAxisTab(Y_AXIS_LABEL);
        setAxisValue(Axis.LEFT, "leftaxis_range_automatic", null, null, null, "leftaxis_scale", "Linear", null, null);
        goToAxisTab(X_AXIS_LABEL);
        setAxisValue(Axis.X, "xaxis_range_automatic", null, null, null, null, null, null, null);
        waitForText("249318596,\n Days", 20, WAIT_FOR_JAVASCRIPT); // 10 in first ptid chart and 10 in save dialog thumbnail preview
        // open the developer panel and verify that it is disabled by default
        assertElementPresent(Locator.button("Developer"));
        goToDeveloperTab();
        assertElementPresent(Locator.button("Enable"));
        assertElementNotPresent(Locator.button("Disable"));
        // enable the feature and verify that you can switch tabs
        clickButton("Enable", 0);
        _ext4Helper.clickTabContainingText("Help");
        assertTextPresentInThisOrder("Your code should define a single function", "data:", "columnMap:", "measureInfo:", "clickEvent:");
        _ext4Helper.clickTabContainingText("Source");
        String fn = _extHelper.getCodeMirrorValue("point-click-fn-textarea");
        if (fn != null)
            Assert.assertTrue("Default point click function not inserted in to editor", fn.startsWith("function (data, columnMap, measureInfo, clickEvent) {"));
        // apply the default point click function
        applyChanges();
        click(Locator.css("svg a circle"));
        _extHelper.waitForExtDialog("Data Point Information");
        waitAndClick(Locator.button("OK"));
        // open developer panel and test JS function validation
        goToDeveloperTab();
        _extHelper.setCodeMirrorValue("point-click-fn-textarea", "");
        waitAndClick(Locator.button("OK"));
        assertTextPresent("Error: the value provided does not begin with a function declaration.");
        _extHelper.setCodeMirrorValue("point-click-fn-textarea", "function(){");
        waitAndClick(Locator.button("OK"));
        assertTextPresent("Error parsing the function:");
        clickButton("Disable", 0);
        _extHelper.waitForExtDialog("Confirmation...");
        _extHelper.clickExtButton("Confirmation...", "Yes", 0);
        clickButton("Enable", 0);
        // test use-case to navigate to participang page on click
        String function = getFileContents(TEST_DATA_API_PATH + "/timeChartPointClickTestFn.js");
        _extHelper.setCodeMirrorValue("point-click-fn-textarea", function);
        applyChanges();
        openSaveMenu();
        saveReport(false);

        pushLocation(); // for impersonation test
        pushLocation(); // for impersonation test

        clickAndWait(Locator.linkWithText("Clinical and Assay Data"));
        waitForText(REPORT_NAME_1);
        clickAndWait(Locator.linkWithText(REPORT_NAME_1));
        waitForText(X_AXIS_LABEL, WAIT_FOR_JAVASCRIPT);
        clickAndWait(Locator.css("svg a circle"), WAIT_FOR_JAVASCRIPT);
        assertTextPresent("Participant - 249318596");

        // verify that only developers can see the button to add point click function
        createUser(USER2, null);
        clickProject(getProjectName());
        clickFolder(getFolderName());
        enterPermissionsUI();
        setUserPermissions(USER2, "Editor");
        // USER2 is not yet a developer, so shouldn't have permissions to this feature
        impersonate(USER2);
        popLocation();
        waitForText(X_AXIS_LABEL, WAIT_FOR_JAVASCRIPT);
        assertElementNotPresent(Locator.button("Developer"));
        stopImpersonating();
        // give USER2 developer perms and try again
        createSiteDeveloper(USER2);
        impersonate(USER2);
        popLocation();
        waitForText(X_AXIS_LABEL, WAIT_FOR_JAVASCRIPT);
        assertElementPresent(Locator.button("Developer"));
        stopImpersonating();
    }

    @LogMethod public void multiMeasureTimeChartTest()
    {
        log("Create multi-measure time chart.");
        clickProject(getProjectName());
        clickFolder(getFolderName());
        goToManageViews();
        _extHelper.clickMenuButton("Create", "Time Chart");
        clickChooseInitialMeasure();
        _ext4Helper.clickGridRowText("CD4+ (cells/mm3)", 0);
        clickButton("Select", 0);
        enterMeasuresPanel();
        addMeasure();
        _ext4Helper.clickGridRowText("Lymphs (cells/mm3)", 0);
        clickButton("Select", 0);
        waitForText("Lymphs (cells/mm3) from Lab Results");
        applyChanges();
        goToGroupingTab();
        setParticipantSelection(PARTICIPANTS);
        setNumberOfCharts(ONE_CHART_PER_MEASURE);
        applyChanges();
        waitForText("CD4+ (cells/mm3), Lymphs (cells/mm3)"); // y-axis default label
        goToMainTitleTab("Lab Results: CD4+ (cells/mm3)");
        setChartTitle(CHART_TITLE);
        applyChanges();
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 3); // 2 for individual chart titles + 1 for chart title in thumbnail preview on save dialog

        openSaveMenu();
        _extHelper.setExtFormElementByLabel("Report Name:", REPORT_NAME_3);
        saveReport(true);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 2); // once for each individual chart title (note: save dialog thumbnail preview hasn't been rendered yet)

        clickFolder(getFolderName());
        goToManageViews();
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickAndWait(Locator.linkWithText("edit"));
        waitForText(CHART_TITLE);
        assertTextPresent("Days Since Start Date", 2); // X-Axis labels for each measure
        assertTextPresent(CHART_TITLE+": Lymphs (cells/mm3)", 1); // Title
        assertTextPresent(CHART_TITLE+": CD4+ (cells/mm3)", 1); // Title
    }

    // This SVG text might change (due to shared axis ranges) if different groups are selected
    private static final String SVG_PARTICIPANTGROUP_SOME = "Created with Rapha\u00ebl 2.1.0New Chart Title: Some Participants050100150200250300350Days Since Start DateCD4+ (cells/mm3), Lymphs (cells/mm3)200.0400.0600.0800.01000.01200.01400.01600.01800.02000.02200.0 249318596 Lymphs(cells/mm3) 249320107 Lymphs(cells/mm3) 249318596 CD4+(cells/mm3) 249320107 CD4+(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_SOME_MODIFIED = "Created with Rapha\u00ebl 2.1.0New Chart Title: Some Participants50100150200250300350Days Since Start DateCD4+ (cells/mm3), Lymphs (cells/mm3)200.0400.0600.0800.01000.01200.01400.01600.01800.0 249318596 Lymphs(cells/mm3) 249318596 CD4+(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_OTHER = "Created with Rapha\u00ebl 2.1.0New Chart Title: Other Participants050100150200250300350Days Since Start DateCD4+ (cells/mm3), Lymphs (cells/mm3)200.0400.0600.0800.01000.01200.01400.01600.01800.02000.02200.0 249320127 Lymphs(cells/mm3) 249320489 Lymphs(cells/mm3) 249320127 CD4+(cells/mm3) 249320489 CD4+(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_YET_MORE = "Created with Rapha\u00ebl 2.1.0New Chart Title: Yet More Participants050100150200250300350Days Since Start DateCD4+ (cells/mm3), Lymphs (cells/mm3)200.0400.0600.0800.01000.01200.01400.01600.01800.02000.02200.0 249320489 Lymphs(cells/mm3) 249320897 Lymphs(cells/mm3) 249325717 Lymphs(cells/mm3) 249320489 CD4+(cells/mm3) 249320897 CD4+(cells/mm3) 249325717 CD4+(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_1 = "Created with Rapha\u00ebl 2.1.0New Chart Title: Group 1: Accute HIV-1050100150200250300350Days Since Start DateCD4+ (cells/mm3), Lymphs (cells/mm3)200.0400.0600.0800.01000.01200.01400.01600.01800.02000.02200.0 249318596 Lymphs(cells/mm3) 249320107 Lymphs(cells/mm3) 249320489 Lymphs(cells/mm3) 249318596 CD4+(cells/mm3) 249320107 CD4+(cells/mm3) 249320489 CD4+(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_2 = "Created with Rapha\u00ebl 2.1.0New Chart Title: Group 2: HIV-1 Negative050100150200250300350Days Since Start DateCD4+ (cells/mm3), Lymphs (cells/mm3)200.0400.0600.0800.01000.01200.01400.01600.01800.02000.02200.0 249320127 Lymphs(cells/mm3) 249320897 Lymphs(cells/mm3) 249325717 Lymphs(cells/mm3) 249320127 CD4+(cells/mm3) 249320897 CD4+(cells/mm3) 249325717 CD4+(cells/mm3)";
    @LogMethod public void participantGroupTimeChartTest()
    {
        log("Test charting with participant groups");

        clickFolder(getFolderName());
        goToManageViews();
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickAndWait(Locator.linkWithText("edit"));
        waitForText(CHART_TITLE);

        // kbl : TODO, filter panel behavior has changed and it's still not certain what the proper AND / OR behavior for categories is
        // until the final details are worked out, just ignore the number of occurances of text, and fix them later
        //
        assertTextPresent("Days Since Start Date");//, 2); // X-Axis labels for each measure
        assertTextPresent(CHART_TITLE+": Lymphs (cells/mm3)");//, 1); // Title
        assertTextPresent(CHART_TITLE+": CD4+ (cells/mm3)");//, 1); // Title

        goToGroupingTab();
        setParticipantSelection(PARTICIPANTS_GROUPS);
        setNumberOfCharts(PER_GROUP);
        _extHelper.uncheckCheckbox("Show Mean"); // select show mean
        _extHelper.checkCheckbox("Show Individual Lines"); // de-select show individual lines

        applyChanges();
        waitForText(GROUP1_NAME);
        assertElementPresent(Locator.linkWithText("Manage Groups"));
        _ext4Helper.checkGridRowCheckbox(GROUP3_NAME);

        log("Verify one line per measure per participant. All groups.");
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_SOME));
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_OTHER));
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_YET_MORE));
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_1));
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_2));

        log("Verify one line per measure per participant. 2/3 groups.");
        // uncheck group 2 (leaving group 1 and 3 checked)
        _ext4Helper.uncheckGridRowCheckbox(GROUP2_NAME);
        waitForCharts(4);
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_SOME));
        assertElementNotPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_OTHER));
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_YET_MORE));
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_1));
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_2));

        openSaveMenu();
        saveReport(false);

        log("Verify report after modifying participant groups.");
        clickFolder(getFolderName());
        modifyParticipantGroups();
        clickFolder(getFolderName());
        clickAndWait(Locator.linkWithText("Clinical and Assay Data"));
        waitAndClickAndWait(Locator.linkWithText(REPORT_NAME_3));
        waitForText(REPORT_NAME_3);
        waitAndClickButton("Edit", WAIT_FOR_PAGE); // switch to edit mode
        waitForText("One or more of the participant groups originally saved with this chart are not currently visible", WAIT_FOR_JAVASCRIPT);
        assertTextNotPresent(GROUP3_NAME);

        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE);//, 1); // One chart per group.

        _ext4Helper.clickParticipantFilterCategory("Cohorts");
        waitForCharts(1);
        assertElementPresent(Locator.css("svg").withText(SVG_PARTICIPANTGROUP_SOME_MODIFIED));

        log("Verify one line per measure per participant.");
        // re-select group 2
        _ext4Helper.checkGridRowCheckbox(GROUP2_NAME);
        waitForCharts(2);
        assertElementPresent(Locator.css("svg").containing(GROUP1_NAME));
        assertElementPresent(Locator.css("svg").containing(GROUP2_NAME));

        // uncheck group 1
        _ext4Helper.clickParticipantFilterCategory(GROUP1_NAME);
        waitForCharts(1);
        assertElementNotPresent(Locator.css("svg").containing(GROUP1_NAME));
        assertElementPresent(Locator.css("svg").containing(GROUP2_NAME));

        // reselect cohorts
        _ext4Helper.clickParticipantFilterCategory("Cohorts");
        waitForCharts(3);
        assertElementPresent(Locator.css("svg").containing(GROUP2_NAME));
        assertElementPresent(Locator.css("svg").containing("Group 1: Accute HIV-1"));
        assertElementPresent(Locator.css("svg").containing("Group 2: HIV-1 Negative"));

        openSaveMenu();
        saveReport(false);

        //Now impersonate another user, make sure only 2 groups show up and warning was given.
        pushLocation();
        impersonate(USER1);
        popLocation(); // Saved Chart with groups.

        waitForText(CHART_TITLE);
        waitForText("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 2: HIV-1 Negative");

        waitForText("Please select at least one group");
        assertElementNotPresent(Locator.css("svg"));
        waitForText("One or more of the participant groups originally saved with this chart are not currently visible.", WAIT_FOR_JAVASCRIPT);
        assertTextPresent(GROUP1_NAME);
        assertTextNotPresent(GROUP2_NAME, GROUP3_NAME);
        stopImpersonating();
    }

    private static final String SVG_MULTI_MANUAL_1 = "Created with Rapha\u00ebl 2.1.0New Chart Title: Other Participants050100150200250Days Since Start DateCD4+ (cells/mm3), Lymphs (cells/mm3)200.0400.0600.0800.01000.01200.01400.01600.01800.02000.02200.0Hemogoblins12.51313.51414.51515.516 249320127Hemoglobin 249320489Hemoglobin 249320127 Lymphs(cells/mm3) 249320489 Lymphs(cells/mm3) 249320127 CD4+(cells/mm3) 249320489 CD4+(cells/mm3)";
    private static final String SVG_MULTI_MANUAL_2 = "Created with Rapha\u00ebl 2.1.0New Chart Title: Other Participants050100150200250Days Since Start DateCD4+ (cells/mm3), Lymphs (cells/mm3)200.0400.0600.0800.01000.01200.01400.01600.01800.02000.02200.0Hemogoblins20 249320127Hemoglobin 249320489Hemoglobin 249320127 Lymphs(cells/mm3) 249320489 Lymphs(cells/mm3) 249320127 CD4+(cells/mm3) 249320489 CD4+(cells/mm3)";
    @LogMethod public void multiAxisTimeChartTest()
    {
        clickProject(getProjectName());
        clickFolder(getFolderName());
        goToManageViews();
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickAndWait(Locator.linkWithText("edit"));
        waitForText(CHART_TITLE);

        waitForText("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 2: HIV-1 Negative");
        waitForCharts(1);

        assertTextPresent("Days Since Start Date", 1); // X-Axis label for one selected group.
        enterMeasuresPanel();
        addMeasure();
        _ext4Helper.clickGridRowText("Hemoglobin", 0);
        clickButton("Select", 0);
//        sleep(1000); // attempt fix for intermittent failure issue where applyChanges button is clicked too quickly (selected measure properties need to be initialized)
        waitForText("Hemoglobin from Lab Results");
        applyChanges();
        waitForText(GROUP2_PTIDS[0]); // TODO: WebDriver waitForText(GROUP2_PTIDS[0]+" Hemoglobin");

        enterMeasuresPanel();
        _ext4Helper.selectComboBoxItemById("yaxis_side", "Right");
        applyChanges();

        goToAxisTab("Hemoglobin");
        setAxisValue(Axis.RIGHT, "rightaxis_range_manual", "12", "16", "Hemogoblins", null, null, null, null);
        waitForSvg(SVG_MULTI_MANUAL_1, 0);

        goToAxisTab("Hemogoblins");
        setAxisValue(Axis.RIGHT, "rightaxis_range_automatic", null, null, null, "rightaxis_scale", "Log", null, null);
        waitForSvg(SVG_MULTI_MANUAL_2, 0);

        openSaveMenu();
        saveReport(false);
    }

    //depends on:  participantGroupTimeChartTest
    @LogMethod public void aggregateTimeChartUITest()
    {
        goToNewTimeChart();

        //choose measure
        _ext4Helper.clickGridRowText("CD4+ (cells/mm3)", 0);
        clickButton("Select", 0);

        //set to aggregate
        goToGroupingTab();
        setParticipantSelection(PARTICIPANTS_GROUPS);
        setNumberOfCharts(PER_GROUP);
        _extHelper.uncheckCheckbox("Show Mean"); // select show mean
        _extHelper.checkCheckbox("Show Individual Lines"); // de-select show individual lines
        applyChanges();

        waitForText("Lab Results: " + GROUP1_NAME);
        waitForCharts(4);

        goToGroupingTab();
        _extHelper.checkCheckbox("Show Mean"); // select show mean
        _extHelper.uncheckCheckbox("Show Individual Lines"); // de-select show individual lines
        applyChanges();
        waitForCharts(4);

        // uncheck all groups
        _ext4Helper.uncheckGridRowCheckbox(GROUP1_NAME);
        _ext4Helper.uncheckGridRowCheckbox(GROUP2_NAME);
        _ext4Helper.uncheckGridRowCheckbox("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 2: HIV-1 Negative");

        waitForElement(Locator.tag("td").withText("Please select at least one group from the filter panel on the right."));
        // re-select group 1 and 2
        _ext4Helper.checkGridRowCheckbox(GROUP1_NAME);
        _ext4Helper.checkGridRowCheckbox(GROUP2_NAME);
        waitForCharts(2);

        // Count data points in charts by checking the title attribute of the points ('*' here due to xpath namespace limitations in svgs
        assertElementPresent(Locator.tag("div").withoutClass("thumbnail").append("//*[name()='svg']/*[name()='a']").withAttributeContaining("*", GROUP1_NAME + ",\n Days"), 10);
        assertElementPresent(Locator.tag("div").withoutClass("thumbnail").append("//*[name()='svg']/*[name()='a']").withAttributeContaining("*", GROUP2_NAME + ",\n Days"), 12);

        goToGroupingTab();
        _extHelper.uncheckCheckbox("Show Mean"); // select show mean
        _extHelper.checkCheckbox("Show Individual Lines"); // de-select show individual lines
        setNumberOfCharts(ONE_CHART_PER_MEASURE);
        applyChanges();
        waitForCharts(1);
        waitForText("Lab Results: CD4");

        openSaveMenu();
        setFormElement(Locator.name("reportName"), "Aggregate");
        setFormElement(Locator.name("reportDescription"), REPORT_DESCRIPTION);
        saveReport(true);
        _ext4Helper.uncheckGridRowCheckbox("Group 1: Accute HIV-1"); // TODO : Remove workaround for bad chart loading
        _ext4Helper.uncheckGridRowCheckbox("Group 2: HIV-1 Negative");
        waitForCharts(1);
        waitForText("Lab Results: CD4");
    }

    /**
     * regression for 15246 : Filtering on a column in the grid before creating time chart causes error
     */
    @LogMethod public void filteredTimeChartRegressionTest()
    {
        log("Test time chart from a filtered grid");

        clickProject(getProjectName());
        clickFolder(getFolderName());
        clickAndWait(Locator.linkWithText("Physical Exam"));

        String ptid = "249318596";
        setFacetedFilter("Dataset", "ParticipantId", ptid);
        assertTextPresent(ptid);

        _extHelper.clickMenuButton("Charts", "Create Time Chart");
        clickChooseInitialMeasure();
        waitForText("Physical Exam", WAIT_FOR_JAVASCRIPT);

        _ext4Helper.clickGridRowText("Pulse", 0);
        clickButton("Select", 0);
        waitForText("Days Since Start Date", WAIT_FOR_JAVASCRIPT);

        openSaveMenu();
        setFormElement(Locator.name("reportName"), "Filtered Time Chart");
        setFormElement(Locator.name("reportDescription"), REPORT_DESCRIPTION);
        saveReport(true);
    }

    @Override
    public void doCleanup(boolean afterTest) throws TestTimeoutException
    {
        deleteUsers(afterTest, USER1, USER2);
        super.doCleanup(afterTest);
    }
}
