/*
 * Copyright (c) 2011-2012 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.test.tests;

import junit.framework.Assert;
import org.labkey.test.Locator;
import org.labkey.test.util.DataRegionTable;
import org.labkey.test.util.Ext4Helper;
import org.labkey.test.util.ExtHelper;
import org.labkey.test.util.StudyHelper;

import java.io.File;
import java.util.List;

public class TimeChartTest extends StudyBaseTest
{
    private static final String PROJECT_NAME =  "TimeChartTest Project" + TRICKY_CHARACTERS_FOR_PROJECT_NAMES;
    private static final String FOLDER_NAME =  "Demo Study";
    private static final String VISIT_FOLDER_NAME =  "Demo Visit Study";
    private static final String STUDY_ZIP = "/sampledata/study/LabkeyDemoStudy.zip";
    private static final String SAMPLE_DATA_PATH = "/sampledata/study/";
    private static final String TEST_DATA_API_PATH = "server/test/data/api";

    private static final String REPORT_NAME_1 = "TimeChartTest Report";
    private static final String REPORT_NAME_2 = "TimeChartTest 2Report";
    private static final String REPORT_NAME_3 = "TimeChartTest Multi-Measure Report";
    private static final String VISIT_REPORT_NAME = "TimeChartTest Visit Report";
    private static final String REPORT_DESCRIPTION = "This is a report generated by the TimeChartTest";
    private static final String X_AXIS_LABEL = "New X-Axis Label";
    private static final String Y_AXIS_LABEL = "New Y-Axis Label";
    private static final String CHART_TITLE = "New Chart Title";
    private static final String VISIT_CHART_TITLE = "APX-1: Abbreviated Physical Exam";
    private static final String ADD_MEASURE_DIALOG = "Add Measure...";
    protected static final String PARTICIPANTS = "Participants";
    protected static final String PARTICIPANTS_GROUPS = "Participant Groups";
    private static final String GROUP1_NAME = "Some Participants";
    private static final String GROUP2_NAME = "Other Participants";
    private static final String GROUP3_NAME = "Yet More Participants";
    public static final String GROUPS_GRID_PANEL = "groupsGridPanel";
    public static final String ONE_CHART_PER_PARTICIPANT = "One Chart Per Participant";
    public static final String ONE_CHART_PER_MEASURE = "One Chart Per Measure/Dimension";

    protected String addMeasuresPath = "";

    private static final String[] GROUP1_PTIDS = {"249318596", "249320107"};
    private static final String[] GROUP2_PTIDS = {"249320127", "249320489"};
    private static final String[] GROUP3_PTIDS = {"249320489"/*Duplicate from group 2*/, "249320897", "249325717"};

    private static final String[] VISIT_STRINGS = {"Int. Vis. %{S.1.1} .%{S.2.1}", "Grp1:F/U/Grp2:V#2", "6 week Post-V#2", "3 wk Post-V#2/V#3"};

    private static final String USER1 = "user1@timechart.test";

    private static final String WIKIPAGE_NAME = "VisualizationGetDataAPITest";
    private static final String[] GETDATA_API_TEST_TITLES = {
        "Single Measure",
        "Two Measures from the same dataset",
        "Two Measures from different datasets",
        "Two Measures from different datasets (#2)",
        "Two Measures - without dimension selected for second, inner join",
        "Two Measures - without dimension selected for second, outer join",
        "Two Measures - WITH dimension selected for second, inner join",
        "Two Measures - WITH dimension selected for second, outer join"
    };

    private static final String[] GETDATA_API_TEST_TITLES_AGGREGATE = {
            "Single Measure (date)",
            "Single Measure (visit)",
            "Two Measures from the same dataset (date)",
            "Two Measures from the same dataset (visit)",
            "Two Measures from different datasets (date)",
            "Two Measures from different datasets (visit)",
            "Two Measures - without dimension selected for second, inner join (date)",
            "Two Measures - without dimension selected for second, inner join (visit)",
            "Two Measures - without dimension selected for second, outer join (date)",
            "Two Measures - without dimension selected for second, outer join (visit)",
            "Two Measures - WITH dimension selected for second, inner join (date)",
            "Two Measures - WITH dimension selected for second, inner join (visit)",
            "Two Measures - WITH dimension selected for second, outer join (date)",
            "Two Measures - WITH dimension selected for second, outer join (visit)",
    };

    private static final String[] GETDATA_API_TEST_NUMROWS = {
        "1 - 33 of 33", 
        "1 - 33 of 33", 
        "1 - 33 of 33",
        "1 - 33 of 33",
        "1 - 75 of 75",
        "1 - 83 of 83",
        "1 - 25 of 25",
        "1 - 33 of 33"
    };

    private static final String[] GETDATA_API_TEST_NUMROWS_AGGREGATE = {
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 15 of 15",
            "1 - 15 of 15",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 15 of 15",
            "1 - 15 of 15",
            "1 - 22 of 22",
            "1 - 22 of 22",

    };

    private static final String[][] GETDATA_API_DATETEST_COLNAMES = {
        {"Study Lab Results Date", "CD4+ (cells/mm3)", "Days"},
        {"Study Lab Results Date", "CD4+ (cells/mm3)", "Hemoglobin", "Visit Date", "Days"},
        {"Study Lab Results Date", "CD4+ (cells/mm3)", "Study Lab Results Participant Visit Visit Date", "Weight (kg)", "Days"},
        {"Study Lab Results Date", "CD4+ (cells/mm3)", "Study Lab Results Participant Visit Visit Date", "Viral Load Quantified (copies/ml)", "Days"},
        {"Study Lab Results Date", "CD4+ (cells/mm3)", "Visit Date", "ObsConc", "ObsConc OOR Indicator", "Days"},
        {"Study Lab Results Date", "CD4+ (cells/mm3)", "Study Lab Results Participant Visit Visit Date", "ObsConc", "ObsConc OOR Indicator", "Days"},
        {"Study Lab Results Date", "CD4+ (cells/mm3)", "Visit Date", "IL-10 (23)", "IL-2 (3)", "TNF-alpha (40)", "Days"},
        {"Study Lab Results Date", "CD4+ (cells/mm3)", "Study Lab Results Participant Visit Visit Date", "IL-10 (23)", "IL-2 (3)", "TNF-alpha (40)", "Days"}
    };

    private static final String[][] GETDATA_API_VISITTEST_COLNAMES = {
        {"Sequencenum", "CD4+ (cells/mm3)", "Visit Label", "Display Order", "Visit Date"},
        {"Sequencenum", "CD4+ (cells/mm3)", "Visit Label", "Display Order", "Visit Date", "Hemoglobin"},
        {"Study Lab Results Participant Visit Sequencenum", "CD4+ (cells/mm3)", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visit Visit Date", "Weight (kg)"},
        {"Study Lab Results Participant Visit Sequencenum", "CD4+ (cells/mm3)", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visit Visit Date", "Viral Load Quantified (copies/ml)"},
        {"Sequencenum", "CD4+ (cells/mm3)", "Visit Label", "Display Order", "Visit Date", "ObsConc", "ObsConc OOR Indicator"},
        {"Study Lab Results Participant Visit Sequencenum", "CD4+ (cells/mm3)", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visit Visit Date", "ObsConc", "ObsConc OOR Indicator"},
        {"Sequencenum", "CD4+ (cells/mm3)", "Visit Label", "Display Order", "Visit Date", "IL-10 (23)", "IL-2 (3)", "TNF-alpha (40)"},
        {"Study Lab Results Participant Visit Sequencenum", "CD4+ (cells/mm3)", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visit Visit Date", "IL-10 (23)", "IL-2 (3)", "TNF-alpha (40)"}
    };

    private static final double[][] GETDATA_API_TEST_DAYS = {
        {44.0, 79.0, 108.0, 190.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 44.0, 44.0, 79.0, 79.0, 79.0, 108.0, 108.0, 108.0, 190.0, 190.0, 190.0, 246.0, 246.0, 246.0,},
        {44.0, 44.0, 44.0, 79.0, 79.0, 79.0, 108.0, 108.0, 108.0, 190.0, 190.0, 190.0, 246.0, 246.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0,}
    };

    private static final String[][] GETDATA_API_TEST_VISITLABEL = {
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 2", "Month 2", "Month 3", "Month 3", "Month 3", "Month 4", "Month 4", "Month 4", "Month 7", "Month 7", "Month 7", "Month 9", "Month 9", "Month 9"},
        {"Month 2", "Month 2", "Month 2", "Month 3", "Month 3", "Month 3", "Month 4", "Month 4", "Month 4", "Month 7", "Month 7", "Month 7", "Month 9", "Month 9", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"}
    };

    private static final String[] GETDATA_API_TEST_MEASURES = {
        "CD4+ (cells/mm3)",
        "Hemoglobin",
        "Weight (kg)",
        "Viral Load Quantified (copies/ml)",
        "ObsConc",
        "ObsConc",
        "IL-10 (23)",
        "IL-10 (23)"
    };

    private static final double[][] GETDATA_API_TEST_MEASURE_VALUES = {
        {543.0, 520.0, 420.0, 185.0, 261.0, 308.0, 177.0, 144.0, 167.0, 154.0},
        {14.5, 16.0, 12.2, 15.5, 13.9, 13.7, 12.9, 11.1, 13.2, 16.1},
        {86.0, 84.0, 83.0, 80.0, 79.0, 79.0, 79.0, 78.0, 77.0, 75.0},
        {4345.0, 3452.0, 98354.0, 32453.0, 324234.0, 345452.0, 235671.0, 456674.0, 567432.0, 653465},
        {35.87, 40.07, 52.74, 13.68, 28.35, 42.38, 2.82, 5.19, 7.99, 5.12, 6.69, 32.33, 3.09, 5.76, 12.49},
        {35.87, 40.07, 52.74, 13.68, 28.35, 42.38, 2.82, 5.19, 7.99, 5.12, 6.69, 32.33, 3.09, 5.76, 12.49},
        {40.07, 42.38, 7.99, 32.33, 12.49},
        {40.07, 42.38, 7.99, 32.33, 12.49}
    };
    private static final String[][] GETDATA_API_COLNAMES_AGGREGATE = {
            {"Days", "Aggregate Count", "Study Lab Results CD4"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum",  "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "Study Lab Results Hemoglobin"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "Study Lab Results Hemoglobin"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "Study HIVTest Results HIVLoad Quant"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "Study HIVTest Results HIVLoad Quant"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "Study Luminex Assay Obs Conc"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "Study Luminex Assay Obs Conc"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "Study Luminex Assay Obs Conc"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "Study Luminex Assay Obs Conc"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "IL-10 (23)::study Luminex Assay Obs Conc MAX", "IL-2 (3)::study Luminex Assay Obs Conc MAX","TNF-alpha (40)::study Luminex Assay Obs Conc MAX"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "IL-10 (23)::study Luminex Assay Obs Conc MAX", "IL-2 (3)::study Luminex Assay Obs Conc MAX","TNF-alpha (40)::study Luminex Assay Obs Conc MAX"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "IL-10 (23)::study Luminex Assay Obs Conc MAX", "IL-2 (3)::study Luminex Assay Obs Conc MAX","TNF-alpha (40)::study Luminex Assay Obs Conc MAX"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "IL-10 (23)::study Luminex Assay Obs Conc MAX", "IL-2 (3)::study Luminex Assay Obs Conc MAX","TNF-alpha (40)::study Luminex Assay Obs Conc MAX"},




    };
    private static final String PER_GROUP = "One Chart Per Group";

    @Override
    public String getAssociatedModuleDirectory()
    {
        return "server/modules/study";
    }

    @Override
    protected String getProjectName()
    {
        return PROJECT_NAME;
    }

    public void configureStudy()
    {
        createProject(PROJECT_NAME);
        createSubfolder(PROJECT_NAME, PROJECT_NAME, FOLDER_NAME, "Study", null);
        importStudyFromZip(new File(getLabKeyRoot() + STUDY_ZIP).getPath());
    }

    public void configureVisitStudy()
    {
        createSubfolder(PROJECT_NAME, PROJECT_NAME, VISIT_FOLDER_NAME, "Study", null);
        initializePipeline();

        clickLinkWithText(VISIT_FOLDER_NAME);
        clickNavButton("Process and Import Data");
        ExtHelper.waitForImportDataEnabled(this);
        ExtHelper.clickFileBrowserFileCheckbox(this, "study.xml");
        selectImportDataAction("Import Study");

        waitForPipelineJobsToComplete(1, "study import", false);
    }

    protected File[] getTestFiles()
    {
        return new File[]{new File(getLabKeyRoot() + "/" + TEST_DATA_API_PATH + "/timechart-api.xml")};
    }

    protected void doCreateSteps()
    {
        configureStudy();

        configureVisitStudy();
    }

    public void doVerifySteps()
    {
        createChartTest();

        stdDevRegressionTest();

        visualizationTest();

        generateChartPerParticipantTest();

        saveTest();

        timeChartPermissionsTest();

        multiMeasureTimeChartTest();

        participantGroupTimeChartTest();

        multiAxisTimeChartTest();

        aggregateTimeChartTest();

        visitBasedChartTest(); 

    }

    private void aggregateTimeChartTest()
    {
        aggregateTimeChartUITest();

        aggregateTimeChartSQLTest();
    }

    private void aggregateTimeChartSQLTest()
    {
        sqlTest(TEST_DATA_API_PATH + "/getDataAggregateTest.html", GETDATA_API_TEST_TITLES_AGGREGATE, GETDATA_API_TEST_NUMROWS_AGGREGATE,  GETDATA_API_COLNAMES_AGGREGATE, null, null, null, null);
    }

    //depends on:  participantGroupTimeChartTest
    private void aggregateTimeChartUITest()
    {
        goToTimeChartScreenAndStartChooseMeasure();

        //choose measure
        clickAt(Locator.xpath(addMeasuresPath + "[div[starts-with(text(), 'CD4+')]]"), "1,1");
        clickNavButton("Select", 0);


        //set to aggregate
        goToGroupingTab();
        setParticipantSelection(PARTICIPANTS_GROUPS);
        setNumberOfCharts(PER_GROUP);
        apply();

        waitForText("Lab Results: " + GROUP1_NAME);

        goToGroupingTab();
        ExtHelper.checkCheckbox(this, "Show Mean"); // select show mean
//        ExtHelper.uncheckCheckbox(this, "Show Individual Lines"); // de-select show individual lines
        apply();

        // uncheck group 1 and 2
        waitForText(GROUP1_NAME);
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '" + GROUP1_NAME + "')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '" + GROUP2_NAME + "')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        sleep(2000);
        waitForText("Please select at least one group");
        // re-select group 1 and 2
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '" + GROUP1_NAME + "')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '" + GROUP2_NAME + "')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        sleep(2000);

        waitForText(GROUP1_NAME + " CD4");
        assertTextPresent(GROUP1_NAME + " CD4", 1); // 10 for the mean line chart and 1 for the legend
        assertTextPresent(GROUP1_NAME + ",\n Days", 10); // 10 for the mean line chart and 1 for the legend
        assertTextPresent(GROUP2_NAME + " CD4", 1); // 12 for the mean line chart and 1 for the legend
        assertTextPresent(GROUP2_NAME + ",\n Days", 12); // 12 for the mean line chart and 1 for the legend

        goToGroupingTab();
        setNumberOfCharts(ONE_CHART_PER_MEASURE);
        apply();
        waitForText("Lab Results: CD4");

        openSaveMenu();
        setFormElement("reportName", "Aggregate");
        setFormElement("reportDescription", REPORT_DESCRIPTION);
        saveReport(true);
        waitForText("Lab Results: CD4");
    }

    private void goToTimeChartScreenAndStartChooseMeasure()
    {

        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        clickMenuButton("Create", "Time Chart");

        waitForElement(Locator.button("Choose a Measure"), WAIT_FOR_JAVASCRIPT);
        clickNavButton("Choose a Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_DIALOG);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
    }

    private void generateChartPerParticipantTest()
    {

        goToGroupingTab();
        setParticipantSelection(PARTICIPANTS);
        setNumberOfCharts(ONE_CHART_PER_PARTICIPANT);
        apply();
        waitForText("HIV Test Results: 249318596");
        assertTextPresentInThisOrder("HIV Test Results: 249318596", "HIV Test Results: 249320107", "HIV Test Results: 249320489");

        goToMainTitleTab();
        setChartTitle(CHART_TITLE);
        apply();
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 5);

        // re-select participant
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '249320127')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        waitForText(CHART_TITLE + ": 249320127", WAIT_FOR_JAVASCRIPT);
        assertTextPresent(CHART_TITLE, 6);
    }

    private void createChartTest()
    {
        clickLinkWithText(PROJECT_NAME);
        clickLinkWithText(FOLDER_NAME);
        addWebPart("Views");
        addWebPart("Datasets");
        addWebPart("Specimens");
        goToManageViews();
        clickMenuButton("Create", "Time Chart");
        waitForElement(Locator.button("Choose a Measure"), WAIT_FOR_JAVASCRIPT);
        clickNavButton("Choose a Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_DIALOG);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        waitForText("NAbAssay", WAIT_FOR_JAVASCRIPT);

        log("Test measure search.");
        ExtHelper.setExtFormElementByType(this, ADD_MEASURE_DIALOG, "text", "nab");
        sleep(500);
        // Count search results (11 in study's NAb assay)
        assertEquals("", 11, getXpathCount(Locator.xpath(ExtHelper.getExtDialogXPath(this, ADD_MEASURE_DIALOG)+"//div[contains(@class, 'x4-grid-view')]/table/tbody/tr"))-1);

        log("Check for appropriate message for measure with no data.");
        addMeasuresPath = ExtHelper.getExtDialogXPath(this, ADD_MEASURE_DIALOG) + "//table/tbody/tr/td";
        clickAt(Locator.xpath(addMeasuresPath + "[div[text()='Cutoff Percentage (3)']]"), "1,1");
        clickNavButton("Select", 0);
        waitForText("No data found for the following measures/dimensions: RunCutoff3", WAIT_FOR_JAVASCRIPT);
    }

    private void visitBasedChartTest()
    {
        log("Create multi-measure time chart.");
        clickLinkWithText(VISIT_FOLDER_NAME);
        clickTab("Manage");
        clickLinkWithText("Manage Views");
        clickMenuButton("Create", "Time Chart");
        waitForElement(Locator.button("Choose a Measure"), WAIT_FOR_JAVASCRIPT);
        clickNavButton("Choose a Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_DIALOG);
        ExtHelper.waitForLoadingMaskToDisappear(this, 5*WAIT_FOR_JAVASCRIPT);
        clickAt(Locator.xpath(addMeasuresPath + "[div[starts-with(text(), '1. Weight')]]"), "1,1");
        clickNavButton("Select", 0);
        waitForText("Days Since Contact Date", WAIT_FOR_JAVASCRIPT);

        goToAxisTab("X-Axis");
        Ext4Helper.selectRadioButton(this, "Chart Type:", "Visit Based Chart");
        assertElementPresent(Locator.xpath("//table[//label[text() = 'Draw x-axis as:'] and contains(@class, 'x4-item-disabled')]"));
        assertElementPresent(Locator.xpath("//table[//label[text() = 'Calculate time interval(s) relative to:'] and contains(@class, 'x4-item-disabled')]"));
        apply();
        waitForTextToDisappear("Days Since Contact Date");
        waitForText("6 week Post-V#2"); // There may be intermittent failures on this line as Protovis occasionally decides it's going to render different x-axis tick marks.
        assertTextPresentInThisOrder(VISIT_STRINGS);

        log("Check visit data.");
        clickNavButton("View Data", 0);
        waitForText("1 - 19 of 19");

        String tableId = getAttribute(Locator.xpath("//table[starts-with(@id, 'dataregion_') and contains(@class, 'labkey-data-region')]"), "id");
        String tableName = tableId.substring(tableId.indexOf('_') + 1, tableId.length());
        DataRegionTable table = new DataRegionTable(tableName, this, false, true);
        List displayOrders = table.getColumnDataAsText("Study APX1Abbreviated Physical Exam Mouse Visit Visit Display Order");
        for (Object str : displayOrders)
        {
            assertEquals("Display order should default to zero.", "0", str.toString());            
        }

        List visits = table.getColumnDataAsText("Study APX1Abbreviated Physical Exam Mouse Visit Visit Label");
        for(int i = 0; i < visits.size(); i++ )
        {
            String visit = visits.get(i).toString();
            visits.set(i, visit);
        }
//        for( String str : VISIT_STRINGS ) //issue 15089
//        {
//            assertTrue("Not all visits present in data table. Missing: " + str, visits.contains(str));
//        }

        clickNavButton("View Chart(s)", 0);
        waitForTextToDisappear("1 - 19 of 19");
        log("Revert to Date-based chart.");
        goToAxisTab("X-Axis");
        Ext4Helper.selectRadioButton(this, "Chart Type:", "Date Based Chart");
        assertElementPresent(Locator.xpath("//table[//label[text() = 'Draw x-axis as:'] and not(contains(@class, 'x4-item-disabled'))]"));
        assertElementPresent(Locator.xpath("//table[//label[text() = 'Calculate time interval(s) relative to:'] and not(contains(@class, 'x4-item-disabled'))]"));
        apply();
        waitForText("Days Since Contact Date");
        assertTextNotPresent(VISIT_STRINGS);

        openSaveMenu();
        setFormElement("reportName", VISIT_REPORT_NAME);
        setFormElement("reportDescription", REPORT_DESCRIPTION);
        saveReport(true);
        waitForText(VISIT_CHART_TITLE, WAIT_FOR_JAVASCRIPT);
    }

    private void saveTest()
    {
        openSaveMenu();
        assertTextPresent("Report Name");
        ExtHelper.setExtFormElementByLabel(this, "Report Name:", REPORT_NAME_1);
        ExtHelper.setExtFormElementByLabel(this, "Report Description:", REPORT_DESCRIPTION);
        saveReport(true);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 6);

        clickNavButton("Save As", 0);
        waitForText("Report Name");
        ExtHelper.setExtFormElementByLabel(this, "Report Name:", REPORT_NAME_2);
        ExtHelper.setExtFormElementByLabel(this, "Report Description:", "This is another report generated by the TimeChartTest");
        Ext4Helper.selectRadioButton(this, "Viewable By:", "Only me");
        saveReport(true);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 6);

        log("Verify saved report");
        clickTab("Manage");
        waitForText("Manage Views", WAIT_FOR_JAVASCRIPT);
        clickLinkWithText("Manage Views");
        waitForText(REPORT_NAME_1, WAIT_FOR_JAVASCRIPT);
        assertTextPresent(REPORT_NAME_2);
        click(Locator.tagWithText("div", REPORT_NAME_1));
        assertTextPresent(REPORT_DESCRIPTION);
        clickAndWait(Locator.xpath("//a[text()='view' and contains(@href, '"+REPORT_NAME_1.replace(" ", "%20")+"')]"));
        waitForText(X_AXIS_LABEL, WAIT_FOR_JAVASCRIPT);
        assertTextPresent(CHART_TITLE, 6);
        pushLocation();
        pushLocation();
    }

    private void visualizationTest()
    {
        log("Check visualization");
        enterMeasuresPanel();
        clickNavButton("Remove Measure", 0);
        apply();
        waitForText("No measure selected.", WAIT_FOR_JAVASCRIPT);
        enterMeasuresPanel();
        addMeasure();

        ExtHelper.setExtFormElementByType(this, ADD_MEASURE_DIALOG, "text", "viral");
        sleep(500);
        assertEquals("", 1, getXpathCount(Locator.xpath(ExtHelper.getExtDialogXPath(this, ADD_MEASURE_DIALOG)+"//div[contains(@class, 'x4-grid-view')]/table/tbody/tr"))-1);
        clickAt(Locator.xpath(addMeasuresPath + "[div[text()='Viral Load Quantified (copies/ml)']]"), "1,1");
        clickNavButton("Select", 0);
        waitForText("Viral Load Quantified (copies/ml) from HIV Test Results");
        apply();
        waitForText("Days Since Start Date", WAIT_FOR_JAVASCRIPT); // x-axis label
        waitForText("Viral Load Quantified (copies/ml)", WAIT_FOR_JAVASCRIPT); // left-axis label
        waitForText("HIV Test Results", WAIT_FOR_JAVASCRIPT); // main title
        assertTextNotPresent("No data found");

        clickNavButton("View Data", 0);
        waitForText("1 - 33 of 33", WAIT_FOR_JAVASCRIPT); 
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '249325717')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        waitForText("1 - 38 of 38", WAIT_FOR_JAVASCRIPT);
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '249320127')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        waitForText("1 - 31 of 31", WAIT_FOR_JAVASCRIPT);

        // verify column headers for date based plotting option
        assertTextPresent("Participant ID");
        assertTextPresent("Visit Date");
        assertTextPresent("Visit");
        assertTextPresent("Viral Load Quantified");
        assertTextPresent("Start Date");
        assertTextPresent("Days");
        assertTextNotPresent("sequencenum");

        log("Test X-Axis");
        clickNavButton("View Chart(s)", 0);

        goToAxisTab("X-Axis");
        Ext4Helper.selectComboBoxItem(this, "Draw x-axis as:", "Weeks");
        apply();
        waitForText("Weeks Since Start Date", WAIT_FOR_JAVASCRIPT);
        setAxisValue("X", null, null, null, X_AXIS_LABEL, null, null, new String[]{X_AXIS_LABEL}, null);

        goToAxisTab("X-Axis");
        Ext4Helper.selectComboBoxItem(this, "Draw x-axis as:", "Days");
        assertEquals(X_AXIS_LABEL, getFormElement("x-axis-label-textfield")); // Label shouldn't change automatically once it has been set manually

        // set manual x-axis range
        setAxisValue("X", "xaxis_range_manual", "15", "40", null, null, null, new String[] {"15", "20", "25", "30", "35", "40"}, null);

        log("Test Y-Axis");
        setAxisValue("Left", "leftaxis_range_manual", "200000", "400000", Y_AXIS_LABEL, null, null, new String[] {Y_AXIS_LABEL}, new String[] {"500000","200000"});
        setAxisValue("Left", "leftaxis_range_manual", "10000", "1000000", null, "leftaxis_scale", "Log", new String[] {"100000", "900000"}, null );
    }

    /**
     *
     * @param axis must be X, Left, or Right, case is important
     * @param lowerBound
     * @param upperBound
     * @param textNotPresent intended to be used for numbers that should no longer be present in the axes.
     *                      ideally we'd calculate this automatically, but that's too complicated a problem for now
     *                      TODO:  calculate not-present number automatically
     *                      TODO: find a better way to determine if the range has changed approprietely (Something other than asserting text is or isnt present).
     */
    protected void setAxisValue(String axis, String rangeId, String lowerBound, String upperBound, String label, String scaleId, String scale, String[] textPresent, String[] textNotPresent)
    {
        if(!(axis.equals("X") || axis.equals("Left") || axis.equals("Right")))
        {
            Assert.fail("Invalid axis marker");
        }

        goToAxisTab(axis + "-Axis");

        //don't want to worry about case for the rest of the function
        axis = axis.toLowerCase();

        if(scaleId!=null && scale!=null)
        {
            Ext4Helper.selectComboBoxItemById(this, scaleId + "-labelEl", scale);        
        }

        if(label!=null)
        {
            click(Locator.css(".revert"+axis+"AxisLabel"));
            waitForElement(Locator.css(".x4-btn-disabled.revert"+axis+"AxisLabel"), WAIT_FOR_JAVASCRIPT);
            setFormElement(axis + "-axis-label-textfield", label);
            fireEvent(Locator.name(axis + "-axis-label-textfield"), SeleniumEvent.keyup);
            waitForElementToDisappear(Locator.css(".x4-btn-disabled.revert"+axis+"AxisLabel"), WAIT_FOR_JAVASCRIPT);
        }

        if (rangeId!=null)
        {
            Ext4Helper.selectRadioButtonById(this, rangeId + "-boxLabelEl");
            if (lowerBound!=null && upperBound!=null)
            {
                Locator minInput = Locator.name(axis + "axis_rangemin");
                setFormElement(minInput, lowerBound);
                assertEquals(lowerBound, getFormElement(minInput));
                sleep(500);

                Locator maxInput = Locator.name(axis + "axis_rangemax");
                setFormElement(maxInput, upperBound);
                assertEquals(upperBound, getFormElement(maxInput));
            }
        }

        apply();
        waitForElement(Locator.xpath("//div[contains(@class, 'x4-hide-offsets')]//label[text()='Calculate time interval(s) relative to:']"));

        if(textNotPresent!=null)
        {
            waitForTextToDisappear(textNotPresent[0], WAIT_FOR_JAVASCRIPT);
            assertTextNotPresent(textNotPresent);
        }

        if(textPresent!=null)
        {
            waitForText(textPresent[0], WAIT_FOR_JAVASCRIPT);
            for (String text : textPresent)
                assertTextPresent(text);
        }
    }

    private void multiMeasureTimeChartTest()
    {
        log("Create multi-measure time chart.");
        clickLinkWithText(PROJECT_NAME);
        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        clickMenuButton("Create", "Time Chart");
        waitForElement(Locator.button("Choose a Measure"), WAIT_FOR_JAVASCRIPT);
        clickNavButton("Choose a Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_DIALOG);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        Locator.XPathLocator measure = Locator.xpath(addMeasuresPath + "[div[starts-with(text(), 'CD4+')]]");
        waitForElement(measure);
        clickAt(measure, "1,1");
        clickNavButton("Select", 0);
        enterMeasuresPanel();
        addMeasure();
        clickAt(Locator.xpath(addMeasuresPath + "[div[starts-with(text(), 'Lymphs')]]"), "1,1");
        clickNavButton("Select", 0);
        waitForText("Lymphs (cells/mm3) from Lab Results");
        apply();
        goToGroupingTab();
        setParticipantSelection(PARTICIPANTS);
        setNumberOfCharts(ONE_CHART_PER_MEASURE);
        apply();
        waitForText("CD4+ (cells/mm3), Lymphs (cells/mm3)"); // y-axis default label
        goToMainTitleTab();
        setChartTitle(CHART_TITLE);
        apply();
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 2);
        
        openSaveMenu();
        ExtHelper.setExtFormElementByLabel(this, "Report Name:", REPORT_NAME_3);
        saveReport(true);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 2);

        clickLinkWithText(FOLDER_NAME);
        goToManageViews();
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickLinkWithText("view");
        waitForText(CHART_TITLE);
        assertTextPresent("Days Since Start Date", 2); // X-Axis labels for each measure
        assertTextPresent(CHART_TITLE+": Lymphocytes", 1); // Title
        assertTextPresent(CHART_TITLE+": CD4", 1); // Title

        getDataDateTest();
        getDataVisitTest();
    }

    private void getDataDateTest()
    {
        sqlTest(TEST_DATA_API_PATH+"/getDataDateTest.html", GETDATA_API_DATETEST_COLNAMES, null, GETDATA_API_TEST_DAYS, GETDATA_API_TEST_MEASURES, GETDATA_API_TEST_MEASURE_VALUES);
    }


    private void sqlTest(String htmlPage, String[][] columnHeaders, String[][] stringCheck, double[][] numbercheck, String[] measure, double[][] measureValue)
    {
        sqlTest(htmlPage, GETDATA_API_TEST_TITLES, GETDATA_API_TEST_NUMROWS, columnHeaders, stringCheck, numbercheck, measure, measureValue);
    }

    private void sqlTest(String htmlPage, String[] testTitles, String[] testNumRows, String[][] columnHeaders, String[][] stringCheck, double[][] numbercheck, String[] measure, double[][] measureValue)
    {
        // check multi-measure calls to LABKEY.Visualization.getData API requesting date information
        clickLinkWithText(PROJECT_NAME);
        clickLinkWithText(FOLDER_NAME);
        // create new wiki to add to Demo study folder, or edit existing one
        if(isTextPresent(WIKIPAGE_NAME))
        {
            clickWebpartMenuItem(WIKIPAGE_NAME, "Edit");
        }
        else
        {
            addWebPart("Wiki");
            createNewWikiPage("HTML");
            setFormElement("name", WIKIPAGE_NAME);
            setFormElement("title", WIKIPAGE_NAME);
        }
        // insert JS for getData calls and querywebpart
        setWikiBody(getFileContents(htmlPage));
        saveWikiPage();
        waitForText("Current Config", WAIT_FOR_JAVASCRIPT);
        clickLinkWithText(WIKIPAGE_NAME);
        waitForText("Current Config", WAIT_FOR_JAVASCRIPT);

        // loop through the getData calls to check grid for: # rows, column headers, and data values (for a single ptid)
        int testCount = Integer.parseInt(getFormElement(Locator.name("configCount")));
        int testIndex = 0;
        while(testIndex < testCount)
        {
            // check title is present
            waitForText(testTitles[testIndex], WAIT_FOR_JAVASCRIPT);
            // check # of rows
            waitForText(testNumRows[testIndex], WAIT_FOR_JAVASCRIPT);
            // check column headers
            DataRegionTable table = new DataRegionTable("apiTestDataRegion", this);

            // check values in interval column for the first participant
            if (numbercheck!=null)
            {
                for (int i = 0; i < numbercheck[testIndex].length; i++)
                {
                    try
                    {
                        double value = Double.parseDouble(table.getDataAsText(i, columnHeaders[testIndex][columnHeaders[testIndex].length - 1]));
                        assertEquals("Unexpected interval value for row " + i, numbercheck[testIndex][i], value);
                    }
                    catch(NumberFormatException e){}
                }
            }
            if (stringCheck!=null)
            {
                for (int i = 0; i < stringCheck[testIndex].length; i++)
                {
                    // visit label column may not have dataset name prefix
                    int colIndex = table.getColumn("Study Lab Results Participant Visit Visit Label");
                    if (colIndex == -1)
                        colIndex = table.getColumn("Visit Label");     

                    String colData = table.getDataAsText(i, colIndex);
                    assertEquals(stringCheck[testIndex][i], colData);
                }
            }
            // check values in measure column
            if (measureValue!=null)
            {
                for (int i = 0; i < measureValue[testIndex].length; i++)
                {
                    String text = table.getDataAsText(i, measure[testIndex]);
                    try
                    {
                        double value = Double.parseDouble(text);
                        assertEquals("Unexpected measure value", measureValue[testIndex][i], value);
                    }
                    catch (NumberFormatException e)
                    {
//                        fail("NFE parsing measure " + measure[testIndex] + ": " + text);
                    }
                    catch (NullPointerException e)
                    {
                        fail("NPE parsing measure " + measure[testIndex] + ": " + text);
                    }
                }
            }

            if(testIndex < testCount-1)
                clickNavButton("Next", 0);

            testIndex++;
        }
    }


    private void getDataVisitTest()
    {
        sqlTest(TEST_DATA_API_PATH + "/getDataVisitTest.html", GETDATA_API_VISITTEST_COLNAMES, GETDATA_API_TEST_VISITLABEL, null, GETDATA_API_TEST_MEASURES, GETDATA_API_TEST_MEASURE_VALUES);
    }

    private void participantGroupTimeChartTest()
    {
        log("Test charting with participant groups");
        log("Create participant groups");
        StudyHelper.createCustomParticipantGroup(this, PROJECT_NAME, FOLDER_NAME, GROUP1_NAME, "Participant", true, GROUP1_PTIDS);
        StudyHelper.createCustomParticipantGroup(this, PROJECT_NAME, FOLDER_NAME, GROUP2_NAME, "Participant", false, GROUP2_PTIDS);
        StudyHelper.createCustomParticipantGroup(this, PROJECT_NAME, FOLDER_NAME, GROUP3_NAME, "Participant", false, GROUP3_PTIDS);

        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickLinkWithText("view");
        waitForText(CHART_TITLE);
        assertTextPresent("Days Since Start Date", 2); // X-Axis labels for each measure
        assertTextPresent(CHART_TITLE+": Lymphocytes", 1); // Title
        assertTextPresent(CHART_TITLE+": CD4", 1); // Title

        goToGroupingTab();
        setParticipantSelection(PARTICIPANTS_GROUPS);
        setNumberOfCharts(PER_GROUP);
        apply();
        waitForText(GROUP1_NAME);
        assertLinkPresentWithText("Manage Groups");  
        
        log("Verify one line per measure per participant. All groups.");
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 4); // One chart per group + 1 hidden main title text field
        // Expected counts = one for the legend plus one for each point on the line
        // GROUP1
        assertTextPresent(GROUP1_PTIDS[0]+" CD4", 1);
        assertTextPresent(GROUP1_PTIDS[0]+" Lymphocytes", 1);
        assertTextPresent(GROUP1_PTIDS[0]+",\n Days:", 20);
        assertTextPresent(GROUP1_PTIDS[1]+" CD4", 1);
        assertTextPresent(GROUP1_PTIDS[1]+" Lymphocytes", 1);
        assertTextPresent(GROUP1_PTIDS[1]+",\n Days:", 10);
        // GROUP2
        assertTextPresent(GROUP2_PTIDS[0]+" CD4", 1);
        assertTextPresent(GROUP2_PTIDS[0]+" Lymphocytes", 1);
        assertTextPresent(GROUP2_PTIDS[0]+",\n Days:", 14);

        // Participant in GROUP2 & GROUP3
        assertTextPresent(GROUP2_PTIDS[1]+" CD4", 2); // includes GROUP3_PTIDS[0]
        assertTextPresent(GROUP2_PTIDS[1]+" Lymphocytes", 2); // includes GROUP3_PTIDS[0]
        assertTextPresent(GROUP2_PTIDS[1]+",\n Days:", 10 * 2);
        // GROUP3
        assertTextPresent(GROUP3_PTIDS[1]+" CD4", 1);
        assertTextPresent(GROUP3_PTIDS[1]+" Lymphocytes", 1);
        assertTextPresent(GROUP3_PTIDS[1]+",\n Days:", 12);
        assertTextPresent(GROUP3_PTIDS[2]+" CD4", 1);
        assertTextPresent(GROUP3_PTIDS[2]+" Lymphocytes", 1);
        assertTextPresent(GROUP3_PTIDS[2]+",\n Days:", 10);

        log("Verify one line per measure per participant. 2/3 groups.");
        // uncheck group 2 (leaving group 1 and 3 checked)
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '" + GROUP2_NAME + "')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        sleep(2000);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 3); // One chart per group + 1 hidden main title text field
        // Expected counts = one for the legend plus one for each point on the line
        // GROUP1
        assertTextPresent(GROUP1_PTIDS[0]+" CD4", 1);
        assertTextPresent(GROUP1_PTIDS[0]+" Lymphocytes", 1);
        assertTextPresent(GROUP1_PTIDS[0]+",\n Days:", 20);
        assertTextPresent(GROUP1_PTIDS[1]+" CD4", 1);
        assertTextPresent(GROUP1_PTIDS[1]+" Lymphocytes", 1);
        assertTextPresent(GROUP1_PTIDS[1]+",\n Days:", 10);
        // GROUP2 (Deselected)
        assertTextPresent(GROUP2_PTIDS[0]+" CD4", 0);
        assertTextPresent(GROUP2_PTIDS[0]+" Lymphocytes", 0);
        assertTextPresent(GROUP2_PTIDS[0]+",\n Days:", 0);
        // GROUP2 (Deselected) & GROUP3
        assertTextPresent(GROUP3_PTIDS[0]+" CD4", 1); // no GROUP2_PTIDS[1]
        assertTextPresent(GROUP3_PTIDS[0]+" Lymphocytes", 1); // no GROUP2_PTIDS[1]
        assertTextPresent(GROUP3_PTIDS[0]+",\n Days:", 10); // no GROUP2_PTIDS[1]
        // GROUP3
        assertTextPresent(GROUP3_PTIDS[1]+" CD4", 1);
        assertTextPresent(GROUP3_PTIDS[1]+" Lymphocytes", 1);
        assertTextPresent(GROUP3_PTIDS[1]+",\n Days:", 12);
        assertTextPresent(GROUP3_PTIDS[2]+" CD4", 1);
        assertTextPresent(GROUP3_PTIDS[2]+" Lymphocytes", 1);
        assertTextPresent(GROUP3_PTIDS[2]+",\n Days:", 10);

        openSaveMenu();
        saveReport(false);
        clickLinkWithText(FOLDER_NAME);
        clickTab("Manage");
        clickLinkWithText("Manage Participant Groups");
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);

        log("Remove a participant from one group.");
        selenium.getEval("selenium.selectExtGridItem('label', '"+GROUP1_NAME+"', -1, 'participantCategoriesGrid', null, false)");
        click(Locator.xpath("//*[text()='"+GROUP1_NAME+"']"));
        clickNavButton("Edit Selected", 0);
        ExtHelper.waitForExtDialog(this, "Define Participant Group");
        waitForElement(Locator.id("dataregion_demoDataRegion"), WAIT_FOR_JAVASCRIPT);
        setFormElement("categoryIdentifiers", GROUP1_PTIDS[0]);
        ExtHelper.clickExtButton(this, "Define Participant Group", "Save", 0);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);

        log("Delete one group.");
        selenium.getEval("selenium.selectExtGridItem('label', '"+GROUP3_NAME+"', -1, 'participantCategoriesGrid', null, false)");
        click(Locator.xpath("//*[text()='"+GROUP3_NAME+"']"));
        clickNavButton("Delete Selected", 0);
        ExtHelper.waitForExtDialog(this, "Delete Group");
        ExtHelper.clickExtButton(this, "Delete Group", "Yes", 0);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        waitForTextToDisappear(GROUP3_NAME, WAIT_FOR_JAVASCRIPT);

        log("Verify report after modifying participant groups.");
        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText(REPORT_NAME_3);
        assertTextNotPresent(GROUP3_NAME);

        waitForText("One or more of the participant groups originally saved with this chart are not currently visible", WAIT_FOR_JAVASCRIPT);

        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 1); // One chart per group.
        // Expected counts = one for the legend plus one for each point on the line
        // GROUP1
        assertTextPresent(GROUP1_PTIDS[0]+" CD4", 1);
        assertTextPresent(GROUP1_PTIDS[0]+" Lymphocytes", 1);
        assertTextPresent(GROUP1_PTIDS[0]+",\n Days:", 20);
        assertTextPresent(GROUP1_PTIDS[1]+" CD4", 0); // Removed ptid from group
        assertTextPresent(GROUP1_PTIDS[1]+" Lymphocytes", 0); // Removed ptid from group
        assertTextPresent(GROUP1_PTIDS[1]+",\n Days:", 0); // Removed ptid from group
        // GROUP2 -- Deselected
        assertTextPresent(GROUP2_PTIDS[0]+" CD4", 0);
        assertTextPresent(GROUP2_PTIDS[0]+" Lymphocytes", 0);
        assertTextPresent(GROUP2_PTIDS[0]+",\n Days:", 0);
        assertTextPresent(GROUP2_PTIDS[1]+" CD4", 0);
        assertTextPresent(GROUP2_PTIDS[1]+" Lymphocytes", 0);
        assertTextPresent(GROUP2_PTIDS[1]+",\n Days:", 0);
        // GROUP3 -- Deleted group
        assertTextPresent(GROUP3_PTIDS[1]+" CD4", 0);
        assertTextPresent(GROUP3_PTIDS[1]+" Lymphocytes", 0);
        assertTextPresent(GROUP3_PTIDS[1]+",\n Days:", 0);
        assertTextPresent(GROUP3_PTIDS[2]+" CD4", 0);
        assertTextPresent(GROUP3_PTIDS[2]+" Lymphocytes", 0);
        assertTextPresent(GROUP3_PTIDS[2]+",\n Days:", 0);

        log("Verify one line per measure per participant.");
        // re-select group 2
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '" + GROUP2_NAME + "')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        sleep(2000);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 2); // One chart per group.
        // Expected counts = one for the legend plus one for each point on the line
        // GROUP1
        assertTextPresent(GROUP1_PTIDS[0]+" CD4", 1);
        assertTextPresent(GROUP1_PTIDS[0]+" Lymphocytes", 1);
        assertTextPresent(GROUP1_PTIDS[0]+",\n Days:", 20);
        assertTextPresent(GROUP1_PTIDS[1]+" CD4", 0); // Removed ptid from group
        assertTextPresent(GROUP1_PTIDS[1]+" Lymphocytes", 0); // Removed ptid from group
        // GROUP2
        assertTextPresent(GROUP2_PTIDS[0]+" CD4", 1);
        assertTextPresent(GROUP2_PTIDS[0]+" Lymphocytes", 1);
        assertTextPresent(GROUP2_PTIDS[0]+",\n Days:", 14);
        assertTextPresent(GROUP3_PTIDS[0]+" CD4", 1);
        assertTextPresent(GROUP3_PTIDS[0]+" Lymphocytes", 1);
        assertTextPresent(GROUP3_PTIDS[0]+",\n Days:", 10);
        // GROUP3 -- Deleted group
        assertTextPresent(GROUP3_PTIDS[1]+" CD4", 0);
        assertTextPresent(GROUP3_PTIDS[1]+" Lymphocytes", 0);
        assertTextPresent(GROUP3_PTIDS[1]+",\n Days:", 0);
        assertTextPresent(GROUP3_PTIDS[2]+" CD4", 0);
        assertTextPresent(GROUP3_PTIDS[2]+" Lymphocytes", 0);
        assertTextPresent(GROUP3_PTIDS[2]+",\n Days:", 0);

        // uncheck group 1
        mouseDown((Locator.xpath("//div[contains(@class, 'x4-grid-cell-inner')]//div[contains(text(), '" + GROUP1_NAME + "')]/../../..//div[contains(@class, 'x4-grid-row-checker')]")));
        sleep(2000);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 1); // One chart per group.

        openSaveMenu();
        saveReport(false);

        //Now impersonate another user, make sure only 2 groups show up and warning was given.
        pushLocation();
        impersonate(USER1);
        popLocation(); // Saved Chart with groups.
        waitForText("Please select at least one group");
        waitForText("One or more of the participant groups originally saved with this chart are not currently visible.", WAIT_FOR_JAVASCRIPT);
        assertTextPresent(GROUP1_NAME);
        assertTextNotPresent(GROUP2_NAME);
        assertTextNotPresent(GROUP3_NAME);
        stopImpersonating();

    }

    private void multiAxisTimeChartTest()
    {
        clickLinkWithText(PROJECT_NAME);
        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickLinkWithText("view");
        waitForText(CHART_TITLE);
        assertTextPresent("Days Since Start Date", 1); // X-Axis label for one selected group.
        enterMeasuresPanel();
        addMeasure();
        clickAt(Locator.xpath(addMeasuresPath + "[div[starts-with(text(), 'Hemoglobin')]]"), "1,1");
        clickNavButton("Select", 0);
        sleep(1000); // attempt fix for intermittent failure issue where apply button is clicked too quickly (selected measure properties need to be initialized)
        waitForText("Hemoglobin from Lab Results");
        apply();
        waitForText(GROUP2_PTIDS[0]+" Hemoglobin");
        //sadly, can't get data from within svg.
//        String transform = getAttribute(Locator.xpath("//a[starts-with(@title, '"+GROUP1_PTIDS[0]+" Hemoglobin:')]/path"), "transform");
//        double height = Double.parseDouble(transform.substring(transform.indexOf(" "), transform.indexOf(")") - 1));

        enterMeasuresPanel();
        Ext4Helper.selectComboBoxItem(this, "Draw y-axis on:", "Right");
        apply();

        setAxisValue("Right", "rightaxis_range_manual", "12", "16", "Hemogoblins", null, null, null, null);
        waitForText("Hemogoblins");
        assertTextNotPresent("17");
        assertTextPresent("16");
        assertTextPresent("12.5");
        assertTextNotPresent("11.5");

//        String newTransform = getAttribute(Locator.xpath("//a[starts-with(@title, '"+GROUP1_PTIDS[0]+" Hemoglobin:')]/path"), "transform");
//        double newHeight = Double.parseDouble(transform.substring(newTransform.indexOf(" "), newTransform.indexOf(")") - 1));
//        assertTrue("Hemoglobin not graphed relative to right axis.", newHeight < height);        

        setAxisValue("Right", "rightaxis_range_automatic", null, null, null, "rightaxis_scale", "Log", null, null);
        assertTextNotPresent("13");
        assertTextNotPresent("12.5");

//        assertTextPresent("100"); TODO: Issue 14846
//        assertTextPresent("10");

        openSaveMenu();
        saveReport(false);
    }

    private void addMeasure()
    {
        clickNavButton("Add Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_DIALOG);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
    }

    private void timeChartPermissionsTest()
    {
        log("Check Time Chart Permissions");
        createUser(USER1, null);
        clickLinkWithText(PROJECT_NAME);
        clickLinkWithText(FOLDER_NAME);
        setUserPermissions(USER1, "Reader");
        setSiteGroupPermissions("Guests", "Reader");
        clickNavButton("Save and Finish");
        impersonate(USER1);
        popLocation(); // Saved chart
        waitForText(CHART_TITLE);
        assertElementNotPresent(Locator.button("Save"));
        assertElementPresent(Locator.button("Save As"));
        clickLinkWithText(FOLDER_NAME);
        assertTextNotPresent(REPORT_NAME_2);
        stopImpersonating();
        signOut();
        popLocation(); // Saved chart
        waitForText(CHART_TITLE);
        assertElementNotPresent(Locator.button("Save"));
        assertElementNotPresent(Locator.button("Save As"));
        simpleSignIn();
    }

    // Regression test for "11764: Time Chart Wizard raises QueryParseException on 'StdDev' measure"
    private void stdDevRegressionTest()
    {
        log("StdDev regression check");
        enterMeasuresPanel();
        clickNavButton("Remove Measure", 0);
        apply();
        waitForText("No measure selected.", WAIT_FOR_JAVASCRIPT);
        enterMeasuresPanel();
        addMeasure();
        clickAt(Locator.xpath(addMeasuresPath + "[div[text()='StdDev']]"), "1,1");
        clickNavButton("Select", 0); 
        waitForText("StdDev from LuminexAssay");
        apply();
        waitForText("Days Since Start Date", WAIT_FOR_JAVASCRIPT); // x-axis label
        waitForText("StdDev", WAIT_FOR_JAVASCRIPT); // left-axis label
        waitForText("LuminexAssay", WAIT_FOR_JAVASCRIPT); // main title
    }

    @Override
    public void doCleanup()
    {
        try {deleteUser(USER1);} catch (Throwable T) {}
        try {deleteProject(PROJECT_NAME);} catch (Throwable T) {}
    }

    private void enterMeasuresPanel()
    {
        clickButton("Measures", 0);
        waitForText("Divide data into Series");
        waitForElement(Locator.button("Add Measure"));
    }

    private void openSaveMenu()
    {
        clickNavButtonByIndex("Save", 0, 0);
        waitForText("Save Thumbnail");
    }

    private void saveReport(boolean expectReload)
    {
        sleep(500); // Needed or the test will often be unable to find the save button with index 1
        clickNavButtonByIndex("Save", 1, 0);
        if (expectReload)
            waitForPageToLoad();
        sleep(5000); 
    }



    private void setChartTitle(String title)
    {
        setFormElement("chart-title-textfield", title);
        fireEvent(Locator.name("chart-title-textfield"), SeleniumEvent.blur);
    }

    private void goToGroupingTab()  
    {
        clickNavButton("Grouping", 0);
        waitForElement(Locator.button("Apply")); 
    }

    private void goToMainTitleTab()
    {
        getWrapper().getEval("window.showTimeChartAxisPanel('Title');");
        waitForElement(Locator.button("Apply"));
    }

    private void goToAxisTab(String axisName)
    {
        getWrapper().getEval("window.showTimeChartAxisPanel('" + axisName + "');");
        waitForElement(Locator.button("Apply"));
    }

    private void apply()
    {
        Locator l =  Locator.button("Apply");
        waitForElement(l);
        click(l);
    }

    private void setParticipantSelection(String selection)
    {
        Ext4Helper.selectRadioButton(this, "Participant Selection:", selection);
    }

    private void setNumberOfCharts(String selection)
    {
        Ext4Helper.selectRadioButton(this, "Number of Charts:", selection);
    }
}
