/*
 * Copyright (c) 2011 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.test.tests;

import junit.framework.Assert;
import org.labkey.test.BaseSeleniumWebTest;
import org.labkey.test.Locator;
import org.labkey.test.SortDirection;
import org.labkey.test.util.DataRegionTable;
import org.labkey.test.util.ExtHelper;
import org.labkey.test.util.StudyHelper;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimeChartTest extends StudyBaseTest
{
//    /?TODO:  Folder and Project names should contain TRICKY_CHARACTERS, don't due to Issue 12830
    private static final String PROJECT_NAME =  "TimeChartTest Project";
//    private static final String PROJECT_NAME =  TRICKY_CHARACTERS_FOR_PROJECT_NAMES + "TimeChartTest Project";
    private static final String FOLDER_NAME =  "Demo Study";
    private static final String VISIT_FOLDER_NAME =  "Demo Visit Study";
    private static final String STUDY_ZIP = "/sampledata/study/LabkeyDemoStudy.zip";
    private static final String SAMPLE_DATA_PATH = "/sampledata/study/";

    private static final String REPORT_NAME_1 = "TimeChartTest Report";
    private static final String REPORT_NAME_2 = "TimeChartTest 2Report";
    private static final String REPORT_NAME_3 = "TimeChartTest Multi-Measure Report";
    private static final String VISIT_REPORT_NAME = "TimeChartTest Visit Report";
    private static final String REPORT_DESCRIPTION = "This is a report generated by the TimeChartTest";
    private static final String X_AXIS_LABEL = "New X-Axis Label";
    private static final String Y_AXIS_LABEL = "New Y-Axis Label";
    private static final String CHART_TITLE = "New Chart Title";
    private static final String VISIT_CHART_TITLE = "APX-1: Abbreviated Physical Exam";
    private static final String ADD_MEASURE_TITLE = "Add Measure";
    private static final String CHOOSE_MEASURE_DIALOG = "Choose a Measure...";
    private static final String GROUP1_NAME = "Some Participants";
    private static final String GROUP2_NAME = "Other Participants";
    private static final String GROUP3_NAME = "Yet More Participants";

    private static final String[] GROUP1_PTIDS = {"249318596", "249320107"};
    private static final String[] GROUP2_PTIDS = {"249320127", "249320489"};
    private static final String[] GROUP3_PTIDS = {"249320489"/*Duplicate from group 2*/, "249320897", "249325717"};

    private static final String[] VISIT_STRINGS = {"1 week Post-V#1", "2 week Post-V#1", "Int. Vis. %{S.1.1} .%{S.2.1}", "3 week Post-V#1", "Grp1:F/U/Grp2:V#2", "1 week Post-V#2", "G1: 6wk/G2: 2wk", "3 week Post-V#2"};

    private static final String USER1 = "user1@timechart.test";

    private static final String WIKIPAGE_NAME = "VisualizationGetDataAPITest";
    private static final String[] GETDATA_API_TEST_TITLES = {
        "Single Measure",
        "Two Measures from the same dataset",
        "Two Measures from different datasets",
        "Two Measures from different datasets (#2)",
        "Two Measures - without dimension selected for second, inner join",
        "Two Measures - without dimension selected for second, outer join",
        "Two Measures - WITH dimension selected for second, inner join",
        "Two Measures - WITH dimension selected for second, outer join"
    };

    private static final String[] GETDATA_API_TEST_TITLES_AGGREGATE = {
            "Single Measure (date)",
            "Single Measure (visit)",
            "Two Measures from the same dataset (date)",
            "Two Measures from the same dataset (visit)",
            "Two Measures from different datasets (date)",
            "Two Measures from different datasets (visit)",
            "Two Measures - without dimension selected for second, inner join (date)",
            "Two Measures - without dimension selected for second, inner join (visit)",
            "Two Measures - without dimension selected for second, outer join (date)",
            "Two Measures - without dimension selected for second, outer join (visit)",
            "Two Measures - WITH dimension selected for second, inner join (date)",
            "Two Measures - WITH dimension selected for second, inner join (visit)",
            "Two Measures - WITH dimension selected for second, outer join (date)",
            "Two Measures - WITH dimension selected for second, outer join (visit)",
    };

    private static final String[] GETDATA_API_TEST_NUMROWS = {
        "1 - 33 of 33", 
        "1 - 33 of 33", 
        "1 - 33 of 33",
        "1 - 33 of 33",
        "1 - 75 of 75",
        "1 - 83 of 83",
        "1 - 25 of 25",
        "1 - 33 of 33"
    };

    private static final String[] GETDATA_API_TEST_NUMROWS_AGGREGATE = {
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 15 of 15",
            "1 - 15 of 15",
            "1 - 22 of 22",
            "1 - 22 of 22",
            "1 - 15 of 15",
            "1 - 15 of 15",
            "1 - 22 of 22",
            "1 - 22 of 22",

    };

    private static final String[][] GETDATA_API_DATETEST_COLNAMES = {
        {"Study Lab Results Date", "Study Lab Results CD4", "Days"},
        {"Study Lab Results Date", "Study Lab Results CD4", "Study Lab Results Hemoglobin", "Study Lab Results Participant Visit Visit Date", "Days"},
        {"Study Lab Results Date", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Date", "Study Physical Exam Weight Kg", "Days"},
        {"Study Lab Results Date", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Date", "Study HIVTest Results HIVLoad Quant", "Days"},
        {"Study Lab Results Date", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Date", "Study Luminex Assay Obs Conc", "Study Luminex Assay Obs Conc OORIndicator", "Days"},
        {"Study Lab Results Date", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Date", "Study Luminex Assay Obs Conc", "Study Luminex Assay Obs Conc OORIndicator", "Days"},
        {"Study Lab Results Date", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Date", "IL-10 (23)", "IL-2 (3)", "TNF-alpha (40)", "Days"},
        {"Study Lab Results Date", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Date", "IL-10 (23)", "IL-2 (3)", "TNF-alpha (40)", "Days"}
    };

    private static final String[][] GETDATA_API_VISITTEST_COLNAMES = {
        {"Study Lab Results Participant Visitsequencenum", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order"},
        {"Study Lab Results Participant Visitsequencenum", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Hemoglobin"},
        {"Study Lab Results Participant Visitsequencenum", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study Physical Exam Weight Kg"},
        {"Study Lab Results Participant Visitsequencenum", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study HIVTest Results HIVLoad Quant"},
        {"Study Lab Results Participant Visitsequencenum", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study Luminex Assay Obs Conc", "Study Luminex Assay Obs Conc OORIndicator"},
        {"Study Lab Results Participant Visitsequencenum", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "Study Luminex Assay Obs Conc", "Study Luminex Assay Obs Conc OORIndicator"},
        {"Study Lab Results Participant Visitsequencenum", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "IL-10 (23)", "IL-2 (3)", "TNF-alpha (40)"},
        {"Study Lab Results Participant Visitsequencenum", "Study Lab Results CD4", "Study Lab Results Participant Visit Visit Label", "Study Lab Results Participant Visit Visit Display Order", "IL-10 (23)", "IL-2 (3)", "TNF-alpha (40)"}
    };

    private static final double[][] GETDATA_API_TEST_DAYS = {
        {44.0, 79.0, 108.0, 190.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 44.0, 44.0, 79.0, 79.0, 79.0, 108.0, 108.0, 108.0, 190.0, 190.0, 190.0, 246.0, 246.0, 246.0,},
        {44.0, 44.0, 44.0, 79.0, 79.0, 79.0, 108.0, 108.0, 108.0, 190.0, 190.0, 190.0, 246.0, 246.0, 246.0, 276.0, 303.0, 335.0, 364.0, 394.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0,},
        {44.0, 79.0, 108.0, 190.0, 246.0,}
    };

    private static final String[][] GETDATA_API_TEST_VISITLABEL = {
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 2", "Month 2", "Month 3", "Month 3", "Month 3", "Month 4", "Month 4", "Month 4", "Month 7", "Month 7", "Month 7", "Month 9", "Month 9", "Month 9"},
        {"Month 2", "Month 2", "Month 2", "Month 3", "Month 3", "Month 3", "Month 4", "Month 4", "Month 4", "Month 7", "Month 7", "Month 7", "Month 9", "Month 9", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9"},
        {"Month 2", "Month 3", "Month 4", "Month 7", "Month 9", "Month 10", "Month 10", "Month 11", "Month 12", "Month 13"}
    };

    private static final String[] GETDATA_API_TEST_MEASURES = {
        "Study Lab Results CD4",
        "Study Lab Results Hemoglobin",
        "Study Physical Exam Weight Kg",
        "Study HIVTest Results HIVLoad Quant",
        "Study Luminex Assay Obs Conc",
        "Study Luminex Assay Obs Conc",
        "IL-10 (23)",
        "IL-10 (23)"
    };

    private static final double[][] GETDATA_API_TEST_MEASURE_VALUES = {
        {543.0, 520.0, 420.0, 185.0, 261.0, 308.0, 177.0, 144.0, 167.0, 154.0},
        {14.5, 16.0, 12.2, 15.5, 13.9, 13.7, 12.9, 11.1, 13.2, 16.1},
        {86.0, 84.0, 83.0, 80.0, 79.0, 79.0, 79.0, 78.0, 77.0, 75.0},
        {4345.0, 3452.0, 98354.0, 32453.0, 324234.0, 345452.0, 235671.0, 456674.0, 567432.0, 653465},
        {35.87, 40.07, 52.74, 13.68, 28.35, 42.38, 2.82, 5.19, 7.99, 5.12, 6.69, 32.33, 3.09, 5.76, 12.49},
        {35.87, 40.07, 52.74, 13.68, 28.35, 42.38, 2.82, 5.19, 7.99, 5.12, 6.69, 32.33, 3.09, 5.76, 12.49},
        {40.07, 42.38, 7.99, 32.33, 12.49},
        {40.07, 42.38, 7.99, 32.33, 12.49}
    };
    private static final String[][] GETDATA_API_COLNAMES_AGGREGATE = {
            {"Days", "Aggregate Count", "Study Lab Results CD4"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum",  "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "Study Lab Results Hemoglobin"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "Study Lab Results Hemoglobin"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "Study HIVTest Results HIVLoad Quant"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "Study HIVTest Results HIVLoad Quant"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "Study Luminex Assay Obs Conc"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "Study Luminex Assay Obs Conc"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "Study Luminex Assay Obs Conc"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "Study Luminex Assay Obs Conc"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "IL-10 (23)::study Luminex Assay Obs Conc MAX", "IL-2 (3)::study Luminex Assay Obs Conc MAX","TNF-alpha (40)::study Luminex Assay Obs Conc MAX"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "IL-10 (23)::study Luminex Assay Obs Conc MAX", "IL-2 (3)::study Luminex Assay Obs Conc MAX","TNF-alpha (40)::study Luminex Assay Obs Conc MAX"},
            {"Days", "Aggregate Count", "Study Lab Results CD4", "IL-10 (23)::study Luminex Assay Obs Conc MAX", "IL-2 (3)::study Luminex Assay Obs Conc MAX","TNF-alpha (40)::study Luminex Assay Obs Conc MAX"},
            {"Study Lab Results Participant Visit Visit Display Order", "Study Lab Results Participant Visitsequencenum", "Study Lab Results Participant Visit Visit Label", "Aggregate Count", "Study Lab Results CD4", "IL-10 (23)::study Luminex Assay Obs Conc MAX", "IL-2 (3)::study Luminex Assay Obs Conc MAX","TNF-alpha (40)::study Luminex Assay Obs Conc MAX"},




    };

    @Override
    public String getAssociatedModuleDirectory()
    {
        return "server/modules/study";
    }

    @Override
    protected String getProjectName()
    {
        return PROJECT_NAME;
    }

    public void configureStudy()
    {
        createProject(PROJECT_NAME);
        createSubfolder(PROJECT_NAME, PROJECT_NAME, FOLDER_NAME, "Study", null);
        importStudyFromZip(new File(getLabKeyRoot() + STUDY_ZIP).getPath());
    }

    public void configureVisitStudy()
    {
        createSubfolder(PROJECT_NAME, PROJECT_NAME, VISIT_FOLDER_NAME, "Study", null);
        initializePipeline();

        clickLinkWithText(VISIT_FOLDER_NAME);
        clickNavButton("Process and Import Data");
        ExtHelper.waitForImportDataEnabled(this);
        ExtHelper.clickFileBrowserFileCheckbox(this, "study.xml");
        selectImportDataAction("Import Study");

        waitForPipelineJobsToComplete(1, "study import", false);
    }

    private void initializePipeline()
    {
        clickLinkWithText("Folder Settings");
        toggleCheckboxByTitle("Pipeline");
        submit();
        addWebPart("Data Pipeline");
        // Set a magic variable to prevent the data region from refreshing out from under us, which causes problems
        // in IE testing
        selenium.runScript("LABKEY.disablePipelineRefresh = true;");
        waitAndClickNavButton("Setup");
        setPipelineRoot(getLabKeyRoot() + SAMPLE_DATA_PATH);
    }

    protected File[] getTestFiles()
    {
        return new File[]{new File(getLabKeyRoot() + "/server/test/data/api/timechart-api.xml")};
    }

    protected void doCreateSteps()
    {
        configureStudy();

        configureVisitStudy();
    }

    public void doVerifySteps()
    {
        createChartTest();

        stdDevRegressionTest();

        visualizationTest();

        generateChartPerParticipantTest();

        saveTest();

        timeChartPermissionsTest();

        multiMeasureTimeChartTest();

        participantGroupTimeChartTest();

        multiAxisTimeChartTest();

        aggregateTimeChartTest();

        visitBasedChartTest();

    }

    private void aggregateTimeChartTest()
    {
        aggregateTimeChartUITest();
        // bug 13061
        aggregateTimeChartSQLTest();
    }

    private void aggregateTimeChartSQLTest()
    {
        sqlTest(testDataAPI + "/getDataAggregateTest.html", GETDATA_API_TEST_TITLES_AGGREGATE, GETDATA_API_TEST_NUMROWS_AGGREGATE,  GETDATA_API_COLNAMES_AGGREGATE, null, null, null, null);
    }

    //depends on:  participantGroupTimeChartTest
    private void aggregateTimeChartUITest()
    {
        goToTimeChartScreenAndStartChooseMeasure();

        //choose measure
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        click(Locator.xpath(ExtHelper.getExtDialogXPath(CHOOSE_MEASURE_DIALOG)+"//dl[./dt/em[starts-with(text(), 'CD4+')]]"));
        clickNavButton("Select", 0);


        //set to aggregate
        ExtHelper.clickExtTab(this, "Chart(s)");
        checkRadioButton("subject_selection", "groups");
        checkRadioButton("number_of_charts", "per_group");

        waitForText("Lab Results: " + GROUP1_NAME);
        clickCheckbox("Show Mean");
        clickCheckbox("Show Individual Lines");

        ExtHelper.prevClickFileBrowserFileCheckbox(this, GROUP1_NAME);
        ExtHelper.prevClickFileBrowserFileCheckbox(this, GROUP2_NAME);
        waitForText("Please select at least one group");

        ExtHelper.prevClickFileBrowserFileCheckbox(this, GROUP1_NAME);
        ExtHelper.prevClickFileBrowserFileCheckbox(this, GROUP2_NAME);
        checkRadioButton("number_of_charts", "per_dimension");
        waitForText("Lab Results: CD4");
        assertTextPresent("Lab Results:");

        ExtHelper.clickExtTab(this, "Overview");
        setFormElement("reportName", "Aggregate");
        setFormElement("reportDescription", REPORT_DESCRIPTION);
        ExtHelper.clickExtButton(this,"Save");

    }

    private void goToTimeChartScreenAndStartChooseMeasure()
    {

        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        clickMenuButton("Create", "Time Chart");

        waitForElement(Locator.button("Choose a Measure"), WAIT_FOR_JAVASCRIPT);
        clickNavButton("Choose a Measure", 0);
        ExtHelper.waitForExtDialog(this, CHOOSE_MEASURE_DIALOG);
    }

    private void generateChartPerParticipantTest()
    {

        ExtHelper.clickExtTab(this, "Chart(s)");
        checkRadioButton("subject_selection", "subjects");
        checkRadioButton("number_of_charts", "per_subject");
        setFormElement("chart-title-textfield", CHART_TITLE);
        fireEvent(Locator.name("chart-title-textfield"), SeleniumEvent.blur);
        assertTextPresent(CHART_TITLE, 5);
        ExtHelper.prevClickFileBrowserFileCheckbox(this, "249320127"); // re-select participant
        waitForText(CHART_TITLE+": 249320127", WAIT_FOR_JAVASCRIPT);
        assertTextPresent(CHART_TITLE, 6);
    }

    private void createChartTest()
    {
        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        clickMenuButton("Create", "Time Chart");
        waitForElement(Locator.button("Choose a Measure"), WAIT_FOR_JAVASCRIPT);
        clickNavButton("Choose a Measure", 0);
        ExtHelper.waitForExtDialog(this, CHOOSE_MEASURE_DIALOG);
        waitForText("NAbAssay", WAIT_FOR_JAVASCRIPT);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);

        log("Test measure search.");
        ExtHelper.setExtFormElementByType(this, CHOOSE_MEASURE_DIALOG, "text", "nab");
        pressEnter(ExtHelper.getExtDialogXPath(CHOOSE_MEASURE_DIALOG)+"//input[contains(@class, 'x-form-field') and @type='text']");
        // Count search results (11 in study's NAb assay)
        assertEquals("", 11, getXpathCount(Locator.xpath(ExtHelper.getExtDialogXPath(CHOOSE_MEASURE_DIALOG)+"//div[contains(@class, 'x-list-body-inner')]/dl")));

        log("Check for appropriate message for measure with no data.");
        click(Locator.xpath(ExtHelper.getExtDialogXPath(CHOOSE_MEASURE_DIALOG)+"//dl[./dt/em[text()='Cutoff Percentage (3)']]"));
        clickNavButton("Select", 0);
        waitForText("No data found", WAIT_FOR_JAVASCRIPT);
    }

    private void visitBasedChartTest()
    {
        log("Create multi-measure time chart.");
        clickLinkWithText(VISIT_FOLDER_NAME);
        clickLinkWithText("Manage Views");
        clickMenuButton("Create", "Time Chart");
        waitForElement(Locator.button("Choose a Measure"), WAIT_FOR_JAVASCRIPT);
        clickNavButton("Choose a Measure", 0);
        ExtHelper.waitForExtDialog(this, CHOOSE_MEASURE_DIALOG);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        click(Locator.xpath(ExtHelper.getExtDialogXPath(CHOOSE_MEASURE_DIALOG)+"//dl[./dt/em[starts-with(text(), '1. Weight')]]"));
        clickNavButton("Select", 0);
        waitForText("Days Since Contact Date", WAIT_FOR_JAVASCRIPT);

        ExtHelper.clickExtTab(this, "X-Axis");
        checkRadioButton("chartType", "visit");
        waitForTextToDisappear("Days Since Contact Date");
        waitForText("1 week Post-V#1");
        assertTextPresentInThisOrder(VISIT_STRINGS);
        assertElementPresent(Locator.xpath("//div[./label/. = 'Draw x-axis as:']/div/div[contains(@class, 'x-item-disabled')]/input"));
        assertElementPresent(Locator.xpath("//div[./label/. = 'Calculate time interval(s) relative to:']/div/div[contains(@class, 'x-item-disabled')]/input"));

        log("Check visit data.");
        clickNavButton("View Data", 0);
        waitForText("1 - 19 of 19");

        String tableId = getAttribute(Locator.xpath("//table[starts-with(@id, 'dataregion_') and contains(@class, 'labkey-data-region')]"), "id");
        String tableName = tableId.substring(tableId.indexOf('_') + 1, tableId.length());
        DataRegionTable table = new DataRegionTable(tableName, this, false, true);
        List displayOrders = table.getColumnDataAsText("Study APX1Abbreviated Physical Exam Mouse Visit Visit Display Order");
        for (Object str : displayOrders)
        {
            assertEquals("Display order should default to zero.", "0", str.toString());            
        }

        List visits = table.getColumnDataAsText("Study APX1Abbreviated Physical Exam Mouse Visit Visit Label");
        for(int i = 0; i < visits.size(); i++ )
        {
            String visit = visits.get(i).toString();
            visits.set(i, visit);
        }
        for( String str : VISIT_STRINGS )
        {
            assertTrue("Not all visits present in data table.", visits.contains(str));
        }

        clickNavButton("View Chart(s)", 0);
        waitForTextToDisappear("1 - 33 of 33");
        log("Revert to Date-based chart.");
        checkRadioButton("chartType", "date");
        waitForText("Days Since Contact Date");
        assertTextNotPresent(VISIT_STRINGS);
        assertElementPresent(Locator.xpath("//div[./label/. = 'Draw x-axis as:']/div/div[not(contains(@class, 'x-item-disabled'))]/input"));
        assertElementPresent(Locator.xpath("//div[./label/. = 'Calculate time interval(s) relative to:']/div/div[not(contains(@class, 'x-item-disabled'))]/input"));

        ExtHelper.clickExtTab(this, "Overview");
        setFormElement("reportName", VISIT_REPORT_NAME);
        setFormElement("reportDescription", REPORT_DESCRIPTION);
        clickNavButton("Save");
        waitForText(VISIT_CHART_TITLE, WAIT_FOR_JAVASCRIPT);
    }

    private void saveTest()
    {
        ExtHelper.clickExtTab(this, "Overview");
        setFormElement("reportName", REPORT_NAME_1);
        setFormElement("reportDescription", REPORT_DESCRIPTION);
        clickNavButton("Save");
        waitForText(CHART_TITLE, WAIT_FOR_JAVASCRIPT);

        clickNavButton("Save As", 0);
        ExtHelper.waitForExtDialog(this, "Save As");
        setFormElement(Locator.xpath("//input[contains(@class, 'report-name-saveas-test')]"), REPORT_NAME_2);
        setFormElement(Locator.xpath("//textarea[contains(@class, 'report-description-saveas-test')]"), "This is another report generated by the TimeChartTest");
        click(Locator.xpath("//input[contains(@class, 'report-shared-me-test')]"));
        clickNavButtonByIndex("Save", 1);
        waitForText(CHART_TITLE, WAIT_FOR_JAVASCRIPT);

        log("Verify saved report");
        clickLinkWithText("Study Overview");
        waitForText("Manage Views", WAIT_FOR_JAVASCRIPT);
        clickLinkWithText("Manage Views");
        waitForText(REPORT_NAME_1, WAIT_FOR_JAVASCRIPT);
        assertTextPresent(REPORT_NAME_2);
        click(Locator.tagWithText("div", REPORT_NAME_1));
        assertTextPresent(REPORT_DESCRIPTION);
        clickAndWait(Locator.xpath("//a[text()='view' and contains(@href, '"+REPORT_NAME_1.replace(" ", "%20")+"')]"));
        waitForText(Y_AXIS_LABEL, WAIT_FOR_JAVASCRIPT);
        assertTextPresent(X_AXIS_LABEL);
        assertTextPresent(CHART_TITLE, 6);
        pushLocation();
        pushLocation();
    }

    private void visualizationTest()
    {
        log("Check visualization");
        clickNavButton("Remove Measure", 0);
        waitForText("No measure selected.", WAIT_FOR_JAVASCRIPT);
        clickNavButton("Add Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_TITLE);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        ExtHelper.setExtFormElementByType(this, ADD_MEASURE_TITLE, "text", "viral");
        pressEnter(ExtHelper.getExtDialogXPath(ADD_MEASURE_TITLE)+"//input[contains(@class, 'x-form-text') and @type='text']");
        assertEquals("", 1, getXpathCount(Locator.xpath(ExtHelper.getExtDialogXPath(ADD_MEASURE_TITLE)+"//div[contains(@class, 'x-list-body-inner')]/dl")));
        click(Locator.xpath(ExtHelper.getExtDialogXPath(ADD_MEASURE_TITLE)+"//dl[./dt/em[text()='HIV Test Results']]"));
        clickNavButton("Select", 0);
        waitForText("Days Since Start Date", WAIT_FOR_JAVASCRIPT);
        assertTextNotPresent("No data found");

        clickNavButton("View Data", 0);
        waitForText("1 - 33 of 33", WAIT_FOR_JAVASCRIPT);
        ExtHelper.prevClickFileBrowserFileCheckbox(this, "249325717"); // Select the 6th participant
        waitForText("1 - 38 of 38", WAIT_FOR_JAVASCRIPT);
        ExtHelper.prevClickFileBrowserFileCheckbox(this, "249320127"); // de-select one participant
        waitForText("1 - 31 of 31", WAIT_FOR_JAVASCRIPT);

        // verify column headers for date based plotting option
        assertTextPresent("Study HIVTest Results Participant Id");
        assertTextPresent("Study HIVTest Results Participant Visit Visit Date");
        assertTextPresent("Study HIVTest Results HIVLoad Quant");
        assertTextPresent("Study Demographics Start Date");
        assertTextPresent("Days");
        assertTextNotPresent("sequencenum");

        log("Test X-Axis");
        clickNavButton("View Chart(s)", 0);

        ExtHelper.clickExtTab(this, "X-Axis");
        ExtHelper.selectComboBoxItem(this, Locator.xpath("//input[contains(@class, 'x-axis-interval-combo-test')]/.."), "Weeks");
        waitForText("Weeks Since Start Date", WAIT_FOR_JAVASCRIPT);
        setFormElement("x-axis-label-textfield", X_AXIS_LABEL);
        fireEvent(Locator.name("x-axis-label-textfield"), SeleniumEvent.blur);

        waitForText(X_AXIS_LABEL, WAIT_FOR_JAVASCRIPT);
        ExtHelper.selectComboBoxItem(this, Locator.xpath("//input[contains(@class, 'x-axis-interval-combo-test')]/.."), "Days");
        assertTextNotPresent("Days Since Start Date"); // Label shouldn't change automatically once it has been set manually
        setAxisValue("X", "15", "40", X_AXIS_LABEL, null, null, new String[] {"15", "45"});

        log("Test Y-Axis");
        setAxisValue("Left", "200000", "400000", Y_AXIS_LABEL, null, null, new String[] {"500,000","200,000"});
        setAxisValue("Left", "10000", "1000000", null,"Log", new String[] {"10,000", "100,000", "1,000,000"}, new String[] {"500,000"});
    }

    /**
     *
     * @param axis must be X or Y, case is unimportant
     * @param lowerBound
     * @param upperBound
     * @param textNotPresent intended to be used for numbers that should no longer be present in the axes.
     *                      ideally we'd calculate this automatically, but that's too complicated a problem for now
     *                      TODO:  calculate not-present number automatically
     */
    protected void setAxisValue(String axis, String lowerBound, String upperBound, String label, String scale, String[] textPresent, String[] textNotPresent)
    {
        if(!(axis.equals("X") || axis.equals("Left") || axis.equals("Right")))
        {
            Assert.fail("Invalid axis marker");
        }
        ExtHelper.clickExtTab(this, axis + "-Axis");
        axis = axis.toLowerCase(); //don't want to worry about case for the rest of the function

        if(scale!=null)
        {
            ExtHelper.selectComboBoxItem(this, Locator.xpath("//div[./label[text()='Scale:']]/div/div"), scale);
        }

        if(label!=null)
        {
            setFormElement(axis + "-axis-label-textfield", label);
        }

        fireEvent(Locator.name(axis + "-axis-label-textfield"), SeleniumEvent.blur);
        waitForText(label, WAIT_FOR_JAVASCRIPT);
        checkRadioButton(axis + "axis_range", "manual");
        setFormElement(Locator.xpath("//input[@name='" + axis + "axis_range']/../../input[1]"), lowerBound);
        fireEvent(Locator.xpath("//input[@name='" + axis + "axis_range']/../../input[1]"), SeleniumEvent.blur);
        setFormElement(Locator.xpath("//input[@name='" + axis + "axis_range']/../../input[2]"), upperBound);
        fireEvent(Locator.xpath("//input[@name='" + axis + "axis_range']/../../input[2]"), SeleniumEvent.blur);
        mouseDown(Locator.xpath("/html/body"));

        if(textPresent!=null)
            waitForText((textPresent[0]), WAIT_FOR_JAVASCRIPT);

        assertTextPresent(textPresent);
        assertTextNotPresent(textNotPresent);


    }

    private void multiMeasureTimeChartTest()
    {
        log("Create multi-measure time chart.");
        clickLinkWithText(PROJECT_NAME);
        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        clickMenuButton("Create", "Time Chart");
        waitForElement(Locator.button("Choose a Measure"), WAIT_FOR_JAVASCRIPT);
        clickNavButton("Choose a Measure", 0);
        ExtHelper.waitForExtDialog(this, CHOOSE_MEASURE_DIALOG);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        click(Locator.xpath(ExtHelper.getExtDialogXPath(CHOOSE_MEASURE_DIALOG)+"//dl[./dt/em[starts-with(text(), 'CD4+')]]"));
        clickNavButton("Select", 0);
        clickNavButton("Add Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_TITLE);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        click(Locator.xpath(ExtHelper.getExtDialogXPath(ADD_MEASURE_TITLE)+"//dl[./dt/em[starts-with(text(), 'Lymphs')]]"));
        clickNavButton("Select", 0);
        ExtHelper.clickExtTab(this, "Chart(s)");
        checkRadioButton("subject_selection", "subjects");
        checkRadioButton("number_of_charts", "per_dimension");
        setFormElement("chart-title-textfield", CHART_TITLE);
        fireEvent(Locator.name("chart-title-textfield"), SeleniumEvent.blur );
        ExtHelper.clickExtTab(this, "Overview");
        setFormElement("reportName", REPORT_NAME_3);
        clickNavButton("Save");
        waitForText(CHART_TITLE, WAIT_FOR_JAVASCRIPT);

        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickLinkWithText("view");
        waitForText(CHART_TITLE, WAIT_FOR_JAVASCRIPT);
        assertTextPresent("Days Since Start Date", 2); // X-Axis labels for each measure
        assertTextPresent(CHART_TITLE+": Lymphocytes", 1); // Title
        assertTextPresent(CHART_TITLE+": CD4", 1); // Title

        getDataDateTest();
        getDataVisitTest();
    }

    private String testDataAPI = "server/test/data/api";
    private void getDataDateTest()
    {
        sqlTest(testDataAPI+"/getDataDateTest.html", GETDATA_API_DATETEST_COLNAMES, null, GETDATA_API_TEST_DAYS, GETDATA_API_TEST_MEASURES, GETDATA_API_TEST_MEASURE_VALUES);
    }


    private void sqlTest(String htmlPage, String[][] columnHeaders, String[][] stringCheck, double[][] numbercheck, String[] measure, double[][] measureValue)
    {
        sqlTest(htmlPage, GETDATA_API_TEST_TITLES, GETDATA_API_TEST_NUMROWS, columnHeaders, stringCheck, numbercheck, measure, measureValue);
    }

    private void sqlTest(String htmlPage, String[] testTitles, String[] testNumRows, String[][] columnHeaders, String[][] stringCheck, double[][] numbercheck, String[] measure, double[][] measureValue)
    {
        // check multi-measure calls to LABKEY.Visualization.getData API requesting date information
        clickLinkWithText(PROJECT_NAME);
        clickLinkWithText(FOLDER_NAME);
        // create new wiki to add to Demo study folder, or edit existing one
        if(isTextPresent(WIKIPAGE_NAME))
        {
            clickWebpartMenuItem(WIKIPAGE_NAME, "Edit");
        }
        else
        {
            addWebPart("Wiki");
            createNewWikiPage("HTML");
            setFormElement("name", WIKIPAGE_NAME);
            setFormElement("title", WIKIPAGE_NAME);
        }
        // insert JS for getData calls and querywebpart
        setWikiBody(getFileContents(htmlPage));
        saveWikiPage();
        waitForText("Current Config", WAIT_FOR_JAVASCRIPT);



        // loop through the getData calls to check grid for: # rows, column headers, and data values (for a single ptid)
        int testCount = Integer.parseInt(getFormElement(Locator.name("configCount")));
        int testIndex = 0;
        while(testIndex < testCount){
            // check title is present
            waitForText(testTitles[testIndex], WAIT_FOR_JAVASCRIPT);
            // check # of rows
            waitForText(testNumRows[testIndex], WAIT_FOR_JAVASCRIPT);
            waitForText("Study Lab Results", WAIT_FOR_JAVASCRIPT);
            // check column headers
            DataRegionTable table = new DataRegionTable("apiTestDataRegion", this);
            for (int i = 0; i < columnHeaders[testIndex].length; i++)
            {
                int colIndex = table.getColumn(columnHeaders[testIndex][i]);
                assertEquals("Unexpected column index for '" + columnHeaders[testIndex][i] + "'", i, colIndex);
            }
            // check values in interval column for the first participant
            if(numbercheck!=null)
            {
                for (int i = 0; i < numbercheck[testIndex].length; i++)
                {
                    try
                    {
                        double value = Double.parseDouble(table.getDataAsText(i, columnHeaders[testIndex][columnHeaders[testIndex].length - 1]));
                        assertEquals("Unexpected interval value for row " + i, numbercheck[testIndex][i], value);
                    }
                    catch(NumberFormatException e){}
                }
            }
            if(stringCheck!=null)
            {
                for (int i = 0; i < stringCheck[testIndex].length; i++)
                {
                    assertEquals(stringCheck[testIndex][i], table.getDataAsText(i, "Study Lab Results Participant Visit Visit Label"));
                }
            }
            // check values in measure column
            if(measureValue!=null)
            {
                for (int i = 0; i < measureValue[testIndex].length; i++)
                {
                    try
                    {
                        double value = Double.parseDouble(table.getDataAsText(i, measure[testIndex]));
                        assertEquals("Unexpected measure value", measureValue[testIndex][i], value);
                    }
                    catch(NumberFormatException e){}
                }
            }

            if(testIndex < testCount-1)
                clickNavButton("Next", 0);

            testIndex++;
        }

    }

    private void getDataVisitTest()
    {
        sqlTest("server/test/data/api/getDataVisitTest.html", GETDATA_API_VISITTEST_COLNAMES, GETDATA_API_TEST_VISITLABEL, null, GETDATA_API_TEST_MEASURES, GETDATA_API_TEST_MEASURE_VALUES);
    }

    private void participantGroupTimeChartTest()
    {
        log("Test charting with participant groups");
        log("Create participant groups");
        StudyHelper.createParticipantGroup(this, PROJECT_NAME, FOLDER_NAME, GROUP1_NAME, GROUP1_PTIDS);
        StudyHelper.createParticipantGroup(this, PROJECT_NAME, FOLDER_NAME, GROUP2_NAME, GROUP2_PTIDS);
        StudyHelper.createParticipantGroup(this, PROJECT_NAME, FOLDER_NAME, GROUP3_NAME, GROUP3_PTIDS);

        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickLinkWithText("view");
        waitForText(CHART_TITLE, WAIT_FOR_JAVASCRIPT);
        assertTextPresent("Days Since Start Date", 2); // X-Axis labels for each measure
        assertTextPresent(CHART_TITLE+": Lymphocytes", 1); // Title
        assertTextPresent(CHART_TITLE+": CD4", 1); // Title

        ExtHelper.clickExtTab(this, "Chart(s)");
        assertElementPresent(Locator.xpath("//div[contains(@class, 'series-selector-tabpanel-test') ]//li[contains(@class, 'active')]//span[text()='Participants']"));
        checkRadioButton("subject_selection", "groups");
        checkRadioButton("number_of_charts", "per_group");
        assertElementPresent(Locator.xpath("//div[contains(@class, 'series-selector-tabpanel-test') ]//li[contains(@class, 'active')]//span[text()='Groups']"));
        log("Verify one line per measure per participant. All groups.");
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 3); // One chart per group.
        // Expected counts = one for the legend plus one for each point on the line
        // GROUP1
        assertTextPresent(GROUP1_PTIDS[0]+" CD4", 11);
        assertTextPresent(GROUP1_PTIDS[0]+" Lymphocytes", 11);
        assertTextPresent(GROUP1_PTIDS[1]+" CD4", 6);
        assertTextPresent(GROUP1_PTIDS[1]+" Lymphocytes", 6);
        // GROUP2
        assertTextPresent(GROUP2_PTIDS[0]+" CD4", 8);
        assertTextPresent(GROUP2_PTIDS[0]+" Lymphocytes", 8);
        // Participant in GROUP2 & GROUP3
        assertTextPresent(GROUP2_PTIDS[1]+" CD4", 6 * 2); // includes GROUP3_PTIDS[0]
        assertTextPresent(GROUP2_PTIDS[1]+" Lymphocytes", 6 * 2); // includes GROUP3_PTIDS[0]
        // GROUP3
        assertTextPresent(GROUP3_PTIDS[1]+" CD4", 7);
        assertTextPresent(GROUP3_PTIDS[1]+" Lymphocytes", 7);
        assertTextPresent(GROUP3_PTIDS[2]+" CD4", 6);
        assertTextPresent(GROUP3_PTIDS[2]+" Lymphocytes", 6);

        log("Verify one line per measure per participant. 2/3 groups.");
        ExtHelper.prevClickFileBrowserFileCheckbox(this, GROUP2_NAME);
        waitForText(CHART_TITLE, 2, WAIT_FOR_JAVASCRIPT); // One chart per group.
        // Expected counts = one for the legend plus one for each point on the line
        // GROUP1
        assertTextPresent(GROUP1_PTIDS[0]+" CD4", 11);
        assertTextPresent(GROUP1_PTIDS[0]+" Lymphocytes", 11);
        assertTextPresent(GROUP1_PTIDS[1]+" CD4", 6);
        assertTextPresent(GROUP1_PTIDS[1]+" Lymphocytes", 6);
        // GROUP2 (Deselected)
        assertTextPresent(GROUP2_PTIDS[0]+" CD4", 0);
        assertTextPresent(GROUP2_PTIDS[0]+" Lymphocytes", 0);
        // GROUP2 (Deselected) & GROUP3
        assertTextPresent(GROUP3_PTIDS[0]+" CD4", 6); // no GROUP2_PTIDS[1]
        assertTextPresent(GROUP3_PTIDS[0]+" Lymphocytes", 6); // no GROUP2_PTIDS[1]
        // GROUP3
        assertTextPresent(GROUP3_PTIDS[1]+" CD4", 7);
        assertTextPresent(GROUP3_PTIDS[1]+" Lymphocytes", 7);
        assertTextPresent(GROUP3_PTIDS[2]+" CD4", 6);
        assertTextPresent(GROUP3_PTIDS[2]+" Lymphocytes", 6);

        ExtHelper.clickExtTab(this, "Overview");
        clickNavButton("Save", 0);
        ExtHelper.waitForExtDialog(this, "Success");
        ExtHelper.clickExtButton(this, "Success", "OK", 0);
        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Study");
        clickLinkWithText("Manage Participant Groups");
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);

        log("Remove a participant from one group.");
        selenium.getEval("selenium.selectExtGridItem('label', '"+GROUP1_NAME+"', null, 'participantCategoriesGrid', null, false)");
        click(Locator.xpath("//*[text()='"+GROUP1_NAME+"']"));
        clickNavButton("Edit Selected", 0);
        ExtHelper.waitForExtDialog(this, "Define Participant Group");
        waitForElement(Locator.id("dataregion_demoDataRegion"), WAIT_FOR_JAVASCRIPT);
        setFormElement("categoryIdentifiers", GROUP1_PTIDS[0]);
        ExtHelper.clickExtButton(this, "Define Participant Group", "Save", 0);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);

        log("Delete one group.");
        selenium.getEval("selenium.selectExtGridItem('label', '"+GROUP3_NAME+"', null, 'participantCategoriesGrid', null, false)");
        click(Locator.xpath("//*[text()='"+GROUP3_NAME+"']"));
        clickNavButton("Delete Selected", 0);
        ExtHelper.waitForExtDialog(this, "Delete Group");
        ExtHelper.clickExtButton(this, "Delete Group", "Yes", 0);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        waitForTextToDisappear(GROUP3_NAME, WAIT_FOR_JAVASCRIPT);

        log("Verify report after modifying participant groups.");
        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText(REPORT_NAME_3);
        assertTextNotPresent(GROUP3_NAME);
        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE, 1); // One chart per group.
        // Expected counts = one for the legend plus one for each point on the line
        // GROUP1
        assertTextPresent(GROUP1_PTIDS[0]+" CD4", 11);
        assertTextPresent(GROUP1_PTIDS[0]+" Lymphocytes", 11);
        assertTextPresent(GROUP1_PTIDS[1]+" CD4", 0); // Removed ptid from group
        assertTextPresent(GROUP1_PTIDS[1]+" Lymphocytes", 0); // Removed ptid from group
        // GROUP2 -- Deselected
        assertTextPresent(GROUP2_PTIDS[0]+" CD4", 0);
        assertTextPresent(GROUP2_PTIDS[0]+" Lymphocytes", 0);
        assertTextPresent(GROUP2_PTIDS[1]+" CD4", 0);
        assertTextPresent(GROUP2_PTIDS[1]+" Lymphocytes", 0);
        // GROUP3 -- Deleted group
        assertTextPresent(GROUP3_PTIDS[1]+" CD4", 0);
        assertTextPresent(GROUP3_PTIDS[1]+" Lymphocytes", 0);
        assertTextPresent(GROUP3_PTIDS[2]+" CD4", 0);
        assertTextPresent(GROUP3_PTIDS[2]+" Lymphocytes", 0);

        log("Verify one line per measure per participant.");
        ExtHelper.prevClickFileBrowserFileCheckbox(this, GROUP2_NAME); // reselect.
        waitForText(CHART_TITLE, 2, WAIT_FOR_JAVASCRIPT); // One chart per group.
        // Expected counts = one for the legend plus one for each point on the line
        // GROUP1
        assertTextPresent(GROUP1_PTIDS[0]+" CD4", 11);
        assertTextPresent(GROUP1_PTIDS[0]+" Lymphocytes", 11);
        assertTextPresent(GROUP1_PTIDS[1]+" CD4", 0); // Removed ptid from group
        assertTextPresent(GROUP1_PTIDS[1]+" Lymphocytes", 0); // Removed ptid from group
        // GROUP2
        assertTextPresent(GROUP2_PTIDS[0]+" CD4", 8);
        assertTextPresent(GROUP2_PTIDS[0]+" Lymphocytes", 8);
        assertTextPresent(GROUP3_PTIDS[0]+" CD4", 6);
        assertTextPresent(GROUP3_PTIDS[0]+" Lymphocytes", 6);
        // GROUP3 -- Deleted group
        assertTextPresent(GROUP3_PTIDS[1]+" CD4", 0);
        assertTextPresent(GROUP3_PTIDS[1]+" Lymphocytes", 0);
        assertTextPresent(GROUP3_PTIDS[2]+" CD4", 0);
        assertTextPresent(GROUP3_PTIDS[2]+" Lymphocytes", 0);
    }

    private void multiAxisTimeChartTest()
    {
        clickLinkWithText(FOLDER_NAME);
        clickLinkWithText("Manage Views");
        waitAndClick(Locator.tagWithText("div", REPORT_NAME_3));
        clickLinkWithText("view");
        waitForText(CHART_TITLE, WAIT_FOR_JAVASCRIPT);
        assertTextPresent("Days Since Start Date", 1); // X-Axis label for one selected group.
        ExtHelper.clickExtTab(this, "Measures");
        clickNavButton("Add Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_TITLE);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        click(Locator.xpath(ExtHelper.getExtDialogXPath(ADD_MEASURE_TITLE)+"//dl[./dt/em[starts-with(text(), 'Hemoglobin')]]"));
        clickNavButton("Select", 0);
        waitForText(GROUP1_PTIDS[0]+" Hemoglobin");
        //sadly, can't get data from within svg.
//        String transform = getAttribute(Locator.xpath("//a[starts-with(@title, '"+GROUP1_PTIDS[0]+" Hemoglobin:')]/path"), "transform");
//        double height = Double.parseDouble(transform.substring(transform.indexOf(" "), transform.indexOf(")") - 1));
        ExtHelper.selectComboBoxItem(this, "Draw y-axis on", "Right");
        ExtHelper.clickExtTab(this, "Right-Axis");
        setText("right-axis-label-textfield", "Hemogoblins");
        fireEvent(Locator.name("right-axis-label-textfield"), SeleniumEvent.blur);

        checkRadioButton("rightaxis_range", "manual");
        setFormElement(Locator.xpath("//div[./div/label[text() = 'Manual']]/input[1]"), "12"); //Min
        setFormElement(Locator.xpath("//div[./div/label[text() = 'Manual']]/input[2]"), "16"); //Max
        fireEvent(Locator.xpath("//div[./div/label[text() = 'Manual']]/input[2]"), SeleniumEvent.blur);
        waitForText("Hemogoblins");
        assertTextNotPresent("17.0");
        assertTextPresent("16.0");
        assertTextPresent("12.5");
        assertTextNotPresent("11.5");
//        String newTransform = getAttribute(Locator.xpath("//a[starts-with(@title, '"+GROUP1_PTIDS[0]+" Hemoglobin:')]/path"), "transform");
//        double newHeight = Double.parseDouble(transform.substring(newTransform.indexOf(" "), newTransform.indexOf(")") - 1));
//        assertTrue("Hemoglobin not graphed relative to right axis.", newHeight < height);        

        checkRadioButton("rightaxis_range", "automatic");
        assertTextPresent("17.0");
        assertTextPresent("11.5");
        ExtHelper.selectComboBoxItem(this, "Scale", "Log");
        assertTextNotPresent("17.0");
        assertTextNotPresent("11.5");
        assertTextPresent("100");
        assertTextPresent("10");

        ExtHelper.clickExtTab(this, "Overview");
        clickNavButton("Save", 0);
        ExtHelper.waitForExtDialog(this, "Success");
        ExtHelper.clickExtButton(this, "Success", "OK", 0);
    }

    private void timeChartPermissionsTest()
    {
        log("Check Time Chart Permissions");
        createUser(USER1, null);
        clickLinkWithText(PROJECT_NAME);
        clickLinkWithText(FOLDER_NAME);
        setUserPermissions(USER1, "Reader");
        setSiteGroupPermissions("Guests", "Reader");
        clickNavButton("Save and Finish");
        impersonate(USER1);
        popLocation(); // Saved chart
        waitForText(CHART_TITLE, WAIT_FOR_JAVASCRIPT);
        assertElementNotVisible(Locator.button("Save"));
        assertElementPresent(Locator.button("Save As"));
        clickLinkWithText(FOLDER_NAME);
        assertTextNotPresent(REPORT_NAME_2);
        stopImpersonating();
        signOut();
        popLocation(); // Saved chart
        waitForText(CHART_TITLE, WAIT_FOR_JAVASCRIPT);
        assertElementNotVisible(Locator.button("Save"));
        assertElementNotVisible(Locator.button("Save As"));
        simpleSignIn();
    }

    // Regression test for "11764: Time Chart Wizard raises QueryParseException on 'StdDev' measure"
    private void stdDevRegressionTest()
    {
        log("StdDev regression check");
        clickNavButton("Remove Measure", 0);
        waitForText("No measure selected.", WAIT_FOR_JAVASCRIPT);
        clickNavButton("Add Measure", 0);
        ExtHelper.waitForExtDialog(this, ADD_MEASURE_TITLE);
        ExtHelper.waitForLoadingMaskToDisappear(this, WAIT_FOR_JAVASCRIPT);
        click(Locator.xpath(ExtHelper.getExtDialogXPath(ADD_MEASURE_TITLE)+"//dl[./dt/em[text()='StdDev']]"));
        clickNavButton("Select", 0);
        waitForText("Days Since Start Date", WAIT_FOR_JAVASCRIPT);
    }

    @Override
    public void doCleanup()
    {
        try {deleteUser(USER1);} catch (Throwable T) {}
        try {deleteProject(PROJECT_NAME);} catch (Throwable T) {}
    }
}
